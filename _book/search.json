[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R语言零基础入门",
    "section": "",
    "text": "前言",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "index.html#为什么要写这个合集",
    "href": "index.html#为什么要写这个合集",
    "title": "R语言零基础入门",
    "section": "为什么要写这个合集",
    "text": "为什么要写这个合集\n我在学习R语言的时候，走了很多弯路，我想把其中的一些注意点写出来，让大家少走点弯路。\n我认为《R语言是实战》是最适合医学生入门R语言的书籍，没有之一。但是由于书的作者是老外，所以这本书的开头部分和中国的特殊情况不太合适，因为它没有告诉我们大陆地区安装R包需要更改镜像，所以你一上来就遇到最大的难题：R包安装……并且有相当一部分医学生学习R语言是为了分析生信数据，然而这部分R包的安装又与默认方法不同……\n另外就是有一些概念比较晦涩难懂，这对于没有任何计算机背景的医学生/医生来说是非常难解决的问题，尤其是刚开始接触R的时候，报错了也不知道怎么解决，或者找不到合适的解决方案，非常煎熬。\n有一个非常著名的悖论就是：当你学会某项技能或知识时，你就会忘记你不会的时候是什么样子。我会尽量做到从初学者的角度进行讲解，虽然我也已经忘记我不会的时候是什么样子……",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "index.html#内容简介",
    "href": "index.html#内容简介",
    "title": "R语言零基础入门",
    "section": "内容简介",
    "text": "内容简介\n主要内容如下：\n\n暂未包含tidyverse系列R包的操作介绍，仅有R语言最基础的内容。\n限于个人专业、水平、时间等问题，难免有很多不足之处，欢迎大家以各种方式（微信、QQ、公众号留言等）交流、建议。但是请不要抬杠，也请不要成为喷子、伸手党。",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "index.html#参考书目",
    "href": "index.html#参考书目",
    "title": "R语言零基础入门",
    "section": "参考书目",
    "text": "参考书目\n主要参考了3本书：\n\n《R语言实战》\n《R数据科学》\n《R语言编程-基于tidyverse》",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "index.html#推荐阅读",
    "href": "index.html#推荐阅读",
    "title": "R语言零基础入门",
    "section": "推荐阅读",
    "text": "推荐阅读\n\n入门/R语言基础：\n\n《R语言实战》\n《R数据科学》\n《R语言编程-基于tidyverse》\n\nR语言绘图：\n\n《R数据可视化手册》\n《ggplot2：数据分析与图形艺术》\n《R绘图系统》\n\n预测模型和机器学习：\n\n《应用预测建模》\n《R语言整洁建模》\n《R语言机器学习-基于mlr3》（中文版翻译中，未上市）\n《精通机器学习-基于R》",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "index.html#作者介绍",
    "href": "index.html#作者介绍",
    "title": "R语言零基础入门",
    "section": "作者介绍",
    "text": "作者介绍\n\n阿越，外科医生，R语言爱好者，长期分享R语言和医学统计学、临床预测模型、生信数据挖掘、R语言机器学习等知识。\n哔哩哔哩：阿越就是我\nGithub：ayueme\n公众号：医学和生信笔记，欢迎扫码关注：",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "01-R和Rstudio.html",
    "href": "01-R和Rstudio.html",
    "title": "1  R/Rstudio/Rtools",
    "section": "",
    "text": "1.1 什么是R语言？\nR语言是一门编程语言，但是同时一个统计软件。R语言的全称是：The R Project for Statistical Computing\n如果你是一个医学生或者医生，那么你一定用过或听说过SPSS，SPSS是一个统计软件，R语言与之类似，也可以实现各种统计分析，但不同的是，R语言需要自己编写代码，而SPSS只要鼠标点击即可（其实SPSS也可以写代码的）。所以你可以简单理解为R语言是一个比SPSS更加强大的统计软件。\n与常见的其他统计分析软件（比如：SPSS、Excel、SAS、Stata、Graphpad Prism）相比，R最主要的优势是免费和功能更加强大。\nR语言的功能非常强大，因为它需要自己编写代码，所以和Python类似，也是一门编程语言，除了统计分析，R语言还非常擅长数据分析、数据可视化、统计建模等。\nR语言安装请看视频教程：R语言和RStudio安装\nR官方网址：https://www.r-project.org/，按照视频教程，选择最新的版本下载安装即可。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R/Rstudio/Rtools</span>"
    ]
  },
  {
    "objectID": "01-R和Rstudio.html#什么是r语言",
    "href": "01-R和Rstudio.html#什么是r语言",
    "title": "1  R/Rstudio/Rtools",
    "section": "",
    "text": "警告\n\n\n\n\n安装路径不能有中文，必须先改成英文；\n安装时建议取消勾选Message Translation，这样报错信息都是英文，方便你搜索解决方法。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R/Rstudio/Rtools</span>"
    ]
  },
  {
    "objectID": "01-R和Rstudio.html#什么是rstudio",
    "href": "01-R和Rstudio.html#什么是rstudio",
    "title": "1  R/Rstudio/Rtools",
    "section": "1.2 什么是Rstudio？",
    "text": "1.2 什么是Rstudio？\n当你安装完R语言之后，它是可以直接使用的，只是此时它的界面非常丑陋，而且缺少各种好用的功能。\n\n\n\nR语言的原生界面\n\n\n上图是R语言的原生界面，看起来很原始，毫无美感，感觉和高大上没什么关系。\n而RStudio是专门为R语言量身定制的集成开发环境（简称IDE），你可以理解成RStudio是R语言的一层漂亮的衣服，安装了RStudio之后，首先是使用界面更加漂亮、更加现代化了，除此之外，还增加了很多顺手的小功能。\n\n\n\n安装Rstudio之后的界面\n\n\n安装RStudio之后，界面明显更加好看了，非常的美观，各种按钮、布局等也更加的现代化。\nRStudio官方下载网址：https://posit.co/downloads/\nRStudio安装教程：R语言和RStudio安装\n\n由于我进行了一些自定义的界面设置，部分细节可能和你的不同。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R/Rstudio/Rtools</span>"
    ]
  },
  {
    "objectID": "01-R和Rstudio.html#rtools",
    "href": "01-R和Rstudio.html#rtools",
    "title": "1  R/Rstudio/Rtools",
    "section": "1.3 Rtools",
    "text": "1.3 Rtools\n为了保证顺畅的使用，Windows用户还需要安装Rtools，MAC和linux用户不需要安装。\n下载Rtools的官方地址是：https://cran.r-project.org/bin/windows/Rtools/\n\n打开后需要选择合适的版本，注意不要选错，我选的是Rtools4.3（因为我的R是4.3.x版本，你不要选错），点击后来到一下界面，点击Rtools43 installer即可下载exe安装文件，下载完点击安装即可。\n\n\n视频版安装教程请参考b站：适合小白的R语言和R包安装教程\n\n都安装好之后就可以开始正式的R语言学习之旅了！",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R/Rstudio/Rtools</span>"
    ]
  },
  {
    "objectID": "02-第一次上手使用.html",
    "href": "02-第一次上手使用.html",
    "title": "2  R语言初体验",
    "section": "",
    "text": "2.1 控制台和脚本窗口\n在Console（中文：控制台）窗口中，大于号&gt;的后面，输入1+1，然后按回车键，就会给出计算结果。同理输入其他运算式，按回车键，都会立马得到结果。\nR语言中的一些常见数学运算：\n# + - * /\n1+1\n## [1] 2\n1-1\n## [1] 0\n3*2\n## [1] 6\n10 / 2\n## [1] 5\n\nabs(-10) # 绝对值\n## [1] 10\nsqrt(25) # 平方根\n## [1] 5\nlog(100)\n## [1] 4.60517\nlog10(100)\n## [1] 2\nlog2(100)\n## [1] 6.643856\nexp(10) # 指数函数\n## [1] 22026.47\n\nceiling(3.257) # 往上取整数\n## [1] 4\nfloor(3.257) # 往下取整数\n## [1] 3\nround(3.275, digits = 2) # 四舍五入\n## [1] 3.28\n除了数学运算，还可以输入各种函数，比如输入print(\"Hello, world\")，你可以尝试下。\n但是通常我们是不会直接在控制台窗口写代码的，而是在脚本窗口写代码，控制台用来查看代码输出结果。R脚本文件的扩展名为.R。\n以下是两种方式新建一个R脚本：\n方法一：依次点击左上角的File-New file-R Script，即可打开一个新的R脚本：\n方法二：点击New File小图标，再点击R script，也可以新建一个R脚本，两种方法完全一样。\n新建脚本文件后，我们就可以在脚本中写自己的代码了，这里写好的代码可以保存的，方便以后使用。如果你没保存，会有*提示，下面的保存按钮可以保存当前脚本（快捷键“control+s”），保存时可以修改这个脚本的名字：\n在这个脚本文件里可以写任何你想写的代码，比如上面我写了一个名字为fruits的向量，其中包括3个元素：apple、banana、watermelon。\n写好代码之后如果你要运行这个代码的话只需要把光标位置放在你要运行的代码的这一行，然后点击Run即可运行这行代码（也可以使用快捷键“control+enter”），代码运行结果会出现在控制台窗口：\n点击Run之后，代码运行结果会出现在控制台窗口：\n如果命令提示符（也就是控制台窗口中的&gt;）变成了一个加号（+），这表示我们输入的代码不完整，它正在等你输入完整的代码，这种情况通常是因为我们输入的代码太长了，超过了1行的限制，或者代码中的标点符号（比如：括号，逗号等）不成对。此时按“Esc”即可退回到正常状态下。\nRStudio的一大优点就是有代码自动补全和语法高亮功能。\n当你输入代码时，编辑器会提供语法高亮和代码补全提示。你只要输入前3个字母，再按Tab键，即可显示所有可能的函数，按上下方向键可以选择你需要的函数，选好之后按enter键即可选中。鼠标停留在函数名字上即可显示该函数的用法：\n另一个常用的快捷键是赋值符号：&lt;-，它是由小于号&lt;和减号-组成的，在RStudio中可以通过快捷键Alt+-快速输入。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R语言初体验</span>"
    ]
  },
  {
    "objectID": "02-第一次上手使用.html#控制台和脚本窗口",
    "href": "02-第一次上手使用.html#控制台和脚本窗口",
    "title": "2  R语言初体验",
    "section": "",
    "text": "注释\n\n\n\n这个大于号&gt;叫命令提示符，提示你这里是输入代码的地方。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n注释\n\n\n\n上图脚本中前两行我写了很多中文，而且在每一行的前面都加了#，#表示这一行不是代码，不需要运行，你可以在#后面写任何你想写的东西，比如一些解释说明的话等。\n\n\n\n\n\n\n\n\n\n\n\n\n提示\n\n\n\n光标位置在代码的开头、中间、结尾都没关系，RStudio都能识别出来，你也可以直接使用鼠标全部选中你要运行的代码，再点击Run，也可以达到一样的效果。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R语言初体验</span>"
    ]
  },
  {
    "objectID": "02-第一次上手使用.html#环境窗口和绘图窗口",
    "href": "02-第一次上手使用.html#环境窗口和绘图窗口",
    "title": "2  R语言初体验",
    "section": "2.2 环境窗口和绘图窗口",
    "text": "2.2 环境窗口和绘图窗口\n当我们运行代码后，我们建立的对象（比如上面的fruits、x、y）会出现在Enviroment窗口中：\n\n当我们执行画图代码后，图形会出现在Plots窗口：\n\n清楚当前环境中的某个对象，可以用：\nrm(xxx) # xxx是对象名字，rm是remove的缩写\n如果要同时清楚所有对象，可以直接点击Enviroment窗口中的小扫帚图标，也可以直接用：\n\nrm(list = ls()) # ls()是list的缩写，意思是列出当前所有对象",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R语言初体验</span>"
    ]
  },
  {
    "objectID": "02-第一次上手使用.html#工作路径",
    "href": "02-第一次上手使用.html#工作路径",
    "title": "2  R语言初体验",
    "section": "2.3 工作路径",
    "text": "2.3 工作路径\n当前工作路径（working directory）是R用来读取文件以及存储结果的默认目录。\n可以使用getwd()查看当前工作路径：\n\ngetwd()\n## [1] \"F:/R_books/R_beginners\"\n\n以上结果说明我在：F盘-R_books-R_beginners这个文件夹里。\n也可以查看Console（控制台）的左上角获取当前的工作目录：\n\n可以使用setwd()重新设置当前工作目录：\n\n# 设置为F盘R_books文件夹\nsetwd(\"F:/R_books/\")\n\n\n\n\n\n\n\n注释\n\n\n\n注意，在R中写路径时需要使用斜杠/，而不是反斜杠\\，如果你要在路径中使用反斜杠，必须用两个\\\\，比如：F:/R_books/和F:\\\\R_books\\\\都是正确的，但是F:\\R_books\\是错误的。\n\n\n确认当前工作目录是非常重要的，尤其是在读取或者保存文件的时候，你总得知道你目前在哪个文件夹吧？\n以下是一些用于管理R工作路径的函数：",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R语言初体验</span>"
    ]
  },
  {
    "objectID": "02-第一次上手使用.html#推荐的rstudio设置",
    "href": "02-第一次上手使用.html#推荐的rstudio设置",
    "title": "2  R语言初体验",
    "section": "2.3 推荐的RStudio设置",
    "text": "2.3 推荐的RStudio设置\n点击Tools-Global Options，按照以下图片所示进行设置。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R语言初体验</span>"
    ]
  },
  {
    "objectID": "03-R包安装.html",
    "href": "03-R包安装.html",
    "title": "3  R包介绍和安装",
    "section": "",
    "text": "3.1 什么是R包？\nR包是别人整理好的工具包，内置各种函数以及帮助文档等信息，可以用来实现特定的功能。\nR包相当于手机里的APP，不同的APP有不同的功能，不同的R包也有不同的功能，比如：有些R包是专门用来画热图的（pheatmap、complexheatmap等），有些R包是专门用来做生存分析（survival、survminer等）的，等。\nR语言在安装时会有很多自带的R包（包括base、datasets、utils、grDevices、graphics、stats、methods），这些R包不需要额外安装，都是出场自带的，安装好R语言就能用了。类似于刚买的新手机有很多内置APP，这些内置APP是不用自己额外安装的。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R包介绍和安装</span>"
    ]
  },
  {
    "objectID": "03-R包安装.html#r包安装",
    "href": "03-R包安装.html#r包安装",
    "title": "3  R包介绍和安装",
    "section": "3.2 R包安装",
    "text": "3.2 R包安装\nR包就相当于手机里的各种APP，自带的APP很明显是无法满足日常使用的，所以我们需要自己安装其他APP。同理，R自带的R包也是无法满足我们要求的，所以我们也要自己安装其他R包。\n安装R包就类似于给手机安装APP，安装方式有多种。比如：\n\n小米手机可以从小米应用商店安装APP，也可以从酷安安装APP，还可以从Google play安装，还可以从官网下载apk文件到本地安装，等；\n苹果手机可以从App Store安装，还可以通过巨魔商店安装，也可以本地安装。\n\nR包安装也有多种方法，不同的R包是存放在不同的应用商店的。比较常见的R包安装主要是4种：\n\n从CRAN安装，\n从bioconductor安装，\n从github安装，\n下载安装包本地安装。\n\n随着学习的深入你还会遇见其他安装方法，我列举的这几种是最常见的。\nR语言是老外发明的东西，我们要访问老外的东西，由于众所周知的原因，是很困难的。不只是R，其他的东西比如Python、Linux等，都是这样。\n所以在安装R包时，我们一定要先修改镜像（mirror）（或者你可以使用魔法，就像你使用Google play需要魔法一样，如果你在国外的话自然是不需要这一步的）。镜像可以简单理解为中国人为了方便自己下载安装，把国外的东西完整复制了一份放到国内，而且会随着国外的更新而更新。使用镜像的好处的不需要魔法我们也可以流畅快速地下载安装R包。\n一个R包只需要安装一次即可重复使用，R包也可以更新、卸载、重装，这个道理和手机APP简直是一模一样。\n以下是4种R包安装方法的详细介绍，这部分我在哔哩哔哩也有相应的视频介绍，点击即可观看：可能是最好用的R包安装教程\n\n3.2.1 从CRAN安装\nCRAN是最主要的存储R包的仓库，大多数R包都是存储在这里的。\n要从CRAN安装，我们首先要修改镜像（如果你人在国外是不需要这一步的）。这个过程在安装好Rstudio之后非常简单，依次点击：Tools-Global Options：\n\n然后按照下图所示依次点击，在列出的镜像中任选一个中国的镜像即可（比如我选择了上海交通大学的镜像），选好之后点击OK即可。这样就修改好镜像了，下面就可以畅快的安装R包了。这种修改镜像只需要1次修改即可，以后从CRAN安装R包都会默认使用你选择的这个镜像，不用每次都改。\n\n比如我们现在想要安装ggplot2这个R包，使用以下代码即可：\n\ninstall.packages(\"ggplot2\")\n\n\n\n\n\n\n\n注释\n\n\n\n安装R包时一定要注意，R包的名字不能拼错，大小写也不能错，而且必须加引号，双引号或者单引号都可以，但是必须是英文状态下的！加载R包不需要引号。\n\n\n\n\n3.2.2 从bioconductor安装\n医学生/医生学习R语言有相当一部分人是想做生信分析的，绝大多数做生信分析的R包都不在CRAN中，而是存储在bioconductor中，这个网站是专门存储生物信息学分析所用R包的。\n\n这个仓库也是老外建立维护的，所以要安装这里的R包，自然也是先要更改镜像的。\n从bioconductor的官方镜像列表中可知，目前中国镜像有以下4个，分别是清华大学的镜像、南京大学的镜像、中国科学技术大学的镜像、西湖大学的镜像，如下所示：\n\n每次在安装bioconductor的R包之前，都要先运行以下代码更换镜像，任选一个运行即可，目前我推荐你使用西湖大学的镜像，原因请看bioconductor有新的镜像选择啦：\n# 使用清华大学的镜像\noptions(BioC_mirror=\"https://mirrors.tuna.tsinghua.edu.cn/bioconductor\")\n\n# 使用南京大学的镜像\noptions(BioC_mirror=\"https://mirrors.nju.edu.cn/bioconductor/\")\n\n# 使用中国科学技术大学的镜像\noptions(BioC_mirror=\"https://mirrors.ustc.edu.cn/bioc/\")\n\n# 使用西湖大学的镜像\noptions(BioC_mirror=\"https://mirrors.westlake.edu.cn/bioconductor\")\n\n\n\n\n\n\n提示\n\n\n\nbioconductor的镜像不像CRAN那样只需要改一次，每次在安装bioconductor的包之前，都需要运行一下修改镜像的代码。但是随着学习的深入，你以后也可以通过修改.Rporfile文件实现1次修改，永久使用！建议初学者就别搞这些花里胡哨的操作了，还是每次都运行一下吧。\n\n\n运行外以上代码更改好镜像之后，我们还需要先安装一个bioconductor的R包管理器，才能安装bioconductor中的R包，使用以下代码安装bioconductor的R包管理器，也就是BiocManager包：\n\n# R4.3.x对应的bioconductor版本是3.18，R4.4.x对应的版本就是3.19了，注意不要搞错，\n# 否则会报错哦\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(version = \"3.18\")\n\n安装好这个包管理器之后，就可以安装bioconductor的R包了。以后再安装bioconductor的R包时，也不需要再重新安装这个包管理器了。\n\n\n\n\n\n\n注释\n\n\n\nR语言每年会进行1次版本大更新，时间大约是每年的4月份，bioconductor每年会进行两次更新，时间大约是每年的4月份和10月份。bioconductor的版本和R的版本是有对应关系的，比如R4.2.x对应的bioconductor版本是3.17，R4.3.x对应的bioconductor版本是3.18，R4.4.x对应的是3.19。对于初学者来说，不建议跨版本使用。\n通常来说R语言不需要频繁的更新，一般不会影响使用，但是如果你一定要更新的话，建议每年的5月份进行更新，刚好是R和bioconductor同时更新的时间，此时的版本刚好匹配，初学者安装R包出错的概率要小一些。\n\n\n比如我们要安装一个做差异分析的R包：limma，就可以使用以下代码：\n\n# 每次都要先改镜像\noptions(BioC_mirror=\"https://mirrors.westlake.edu.cn/bioconductor\")\n\n# 改完镜像再安装\nBiocManager::install(\"limma\")\n\n这样limma包就安装好了。以后你要安装bioconductor中的R包，就先改镜像，然后使用BiocManager::install(\"xxx\")即可。\n\n\n3.2.3 从github安装\n有一些R包既不在CRAN，也不在bioconductor，而是在github中。要安装github中的R包，建议借助devtools或者remotes包实现。\n\n\n\n\n\n\n注释\n\n\n\nremotes可以认为是devtools的精简版，其实区别不大，所以我个人比较推荐使用devtools。\n\n\n首先从CRAN安装devtools包：\n\n# 没改镜像的记得先改镜像\ninstall.packages(\"devtools\")\n\n安装好之后再使用install_github()安装github中的R包，比如，我现在想要安装easyTCGA这个包，使用以下代码即可：\n\nlibrary(devtools)\ninstall_github(\"ayueme/easyTCGA\")\n\n其中easyTCGA是R包的名字，前面的ayueme是仓库所有者的名字。千万不要写错，写错必然报错！\n一般你找到这个R包都会有介绍如何安装，直接复制粘贴即可，github左上角也会有名字的，照抄就行，比如：\n\n但是国内访问github是有困难的，如果你的网络不行，那么这个方式大概率你会失败。有的时候即使你能打开github的网页，也不见得你用以上方法就能安装成功。那么这时你可以尝试下面介绍的本地安装。\n\n\n3.2.4 本地安装\n本地安装R包就和本地安装手机APP没有任何区别，把安装包下载下来，然后安装就好了。\n还是以上面的easyTCGA为例，如果你要本地安装，首先你得下载这个R包到你的电脑上，所以你得找到这个R包的下载地址才行！\n在github上面的R包的下载地址都是有规律的，通常都是：https://github.com/xxxx/R包名字\n比如：easyTCGA包的下载地址是：https://github.com/ayueme/easyTCGA\n打开网址后，按照顺序依次点击：Code-Download ZIP，即可把R包下载到本地了（对你的网络有要求，因为这个网站也是老外的！）。\n\n\n\n下载github的R包\n\n\n我下载的R包存放在我的E盘-R-R包，这个文件夹里面，所以存放路径是：E:/R/R包/easyTCGA-main.zip\n此时安装包已经下载好了，我们可以借助devtools里面的install_local()函数安装本地R包：\n\nlibrary(devtools)\n\n# 注意你的R包存放路径不要写错！写错必报错！\ninstall_local(\"E:/R/R包/easyTCGA-main.zip\")\n\n本地安装需要注意R包依赖的问题。R包依赖的意思是有些R包是建立在其他R包的基础上的，所以你在安装时需要注意先后顺序，必须先安装某个包然后才能安装另一个包，否则就会出现安装失败。比如easyTCGA就是建立在很多R包之上，所以如果你没提前安装easyTCGA的依赖包，那么在进行本地安装时也会报错。\n这是本地安装最大的弊端，install.packages()和BiocManager::install()在安装R包时会自动帮你先安装依赖包，所以不会有问题。\neasyTCGA有以下依赖包，需要你先安装好下面的依赖包，才能安装easyTCGA：\n\n# 安装bioconductor上面的依赖R包\n# 首先要改镜像，下面是清华的镜像，有时会有问题，可更改其他镜像试试\noptions(BioC_mirror=\"https://mirrors.tuna.tsinghua.edu.cn/bioconductor\")\nif(!require(\"BiocManager\")) install.packages(\"BiocManager\")\nif(!require(\"TCGAbiolinks\")) BiocManager::install(\"TCGAbiolinks\")\nif(!require(\"SummarizedExperiment\")) BiocManager::install(\"SummarizedExperiment\")\nif(!require(\"DESeq2\")) BiocManager::install(\"DESeq2\")\nif(!require(\"edgeR\")) BiocManager::install(\"edgeR\")\nif(!require(\"limma\")) BiocManager::install(\"limma\")\n\n# 安装cran上面的依赖R包\nif(!require(\"survival\")) install.packages(\"survival\")\nif(!require(\"broom\")) install.packages(\"broom\")\nif(!require(\"devtools\")) install.packages(\"devtools\")\nif(!require(\"reshape2\")) install.packages(\"reshape2\")\nif(!require(\"data.table\")) install.packages(\"data.table\")\nif(!require(\"ggplot2\")) install.packages(\"ggplot2\")\nif(!require(\"ggpubr\")) install.packages(\"ggpubr\")\n\n以上安装R包的代码我加了一个if判断语句，意思是：如果我已经安装了这个R包，就不要重复安装了，如果没安装，就帮我安装。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R包介绍和安装</span>"
    ]
  },
  {
    "objectID": "03-R包安装.html#其他安装方法",
    "href": "03-R包安装.html#其他安装方法",
    "title": "3  R包介绍和安装",
    "section": "3.3 其他安装方法",
    "text": "3.3 其他安装方法\n除了以上介绍的安装方法外，还有一些R包的安装方法比较特殊，这里给大家简单介绍下，就以mlr3proba为例。这个R包由于一些原因不在CRAN中，如果你要安装Github版本，可以按照以下代码安装：\n\nremotes::install_github(\"mlr-org/mlr3proba\")\n\n但是如果你要使用install.packages()函数安装，需要按照如下方式进行：\n\ninstall.packages(\"mlr3proba\", repos = \"https://mlr-org.r-universe.dev\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R包介绍和安装</span>"
    ]
  },
  {
    "objectID": "03-R包安装.html#终极大法",
    "href": "03-R包安装.html#终极大法",
    "title": "3  R包介绍和安装",
    "section": "3.4 终极大法",
    "text": "3.4 终极大法\n直接百度、谷歌、必应。\n比如一个叫linkET的包，你不知道怎么安装，直接搜索啊：",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R包介绍和安装</span>"
    ]
  },
  {
    "objectID": "03-R包安装.html#r包常见报错",
    "href": "03-R包安装.html#r包常见报错",
    "title": "3  R包介绍和安装",
    "section": "3.5 R包常见报错",
    "text": "3.5 R包常见报错\n1. 载入了名字空间‘rlang’ 1.0.1，但需要的是&gt;= 1.0.2\n\n`rlang`包的版本太低了，你需要先安装1.0.2以上版本的`rlang`，记得直接关闭Rstudio，重新打开再安装\n\n2. 不存在叫‘latticeExtra’这个名字的程辑包\n\n首先看看自己的拼写错了吗？标点符号有错误吗？没问题就安装这个`latticeExtra`包即可\n\n3. 程序包安装入‘C:/Users/xxx/AppData/Local/R/win-library/4.2’(因为‘lib’没有被指定)\nWarning in install.packages : package ‘limma’ is not available for this version of R\nA version of this package for your version of R might be available elsewhere\n\n`limma`包在bioconductor上，不在CRAN上，要通过`BiocManager`安装。\n\n4. 安装程序包‘mapproj’时退出狀態的值不是0\n\n大概率依赖包没装好。\n\n5. library(lsmeans) Error: 找不到‘lsmeans’所需要的程辑包‘emmeans’\n\n缺什么就安装什么。找不到`lsmeans`就安装`lsmeans`。\n\n6. 用devtools从github安装包，无论是直接安装还是本地安装，都报timeout错误\n\ngithub在国外，访问国外的网站你得科学上网，你网络行吗？你能访问谷歌不代表你能从github下载东西。\n\n7. 安装r包时出现：update all/some/none?\n\n问你要不要：更新所有R包/部分R包/不更新？输入n就行了，表示不更新。\n\n8. library(tidyverse)出现一大推字\n\n── Attaching core tidyverse packages ────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ──────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package to force all conflicts to become errors\n\n正常的，不用管，只要没有`Error`就没事。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R包介绍和安装</span>"
    ]
  },
  {
    "objectID": "04-什么是函数.html",
    "href": "04-什么是函数.html",
    "title": "4  什么是函数？",
    "section": "",
    "text": "4.1 函数\n函数的英文是function，所以函数是用来实现特定功能的、由别人整理好的一段代码，通常一个R包会包含多个函数。这就好比一个手机APP可以做多个事情，比如微信可以用来文字聊天、视频聊天、查看订阅号消息等，甚至还可以看直播。\n一个R包里面有多个函数，这些函数也可以实现不同的功能。比如graphics包里面的两个函数：\nplot(1:10,1:10) # 画图\nlines(1:10) # 添加一条线\n这里的plot()就是一个函数，可以实现画图功能。当你运行plot(1:10,1:10)之后，它会为你开辟一片空间用于画图，然后把这个图的框架（4条框以及坐标等）给你画出来，然后把点也给你画上去，这就是这个函数的功能（当然它还有其他功能）。\n当你接着运行lines(1:10)之后，它会给你画一条线，这就是lines()这个函数的功能。\n当我们在使用某个手机APP时，肯定是要先打开这个APP，然后才能使用它，R包也是如此，一定要先加载R包，才能使用R包里的函数。\n这个plot()函数是graphics包里面的，这个R包是R语言自带的（有些自带的不需要加载也能使用），不需要额外安装，使用时也不需要加载（即不需要先library(graphics)），自己安装的R包是需要先加载才能使用里面的函数的。\n比如ggplot()函数是属于ggplot2这个R包的，这个R包是需要自己安装的，所以在使用前需要先加载才能使用：\n# 先加载对应的R包\nlibrary(ggplot2)\n\n# 才能使用里面的函数\nggplot()\n我经常看到有人把函数当做R包，然后使用install.packages(\"\")进行安装，非常错误的做法，比如有一个R包叫rms，其中有一个函数叫lrm，有的人不明所以，直接使用install.packages(\"lrm\")，结果报错:\n你要安装的是R包，不是函数，千万要注意，别犯这种低级错误。",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>什么是函数？</span>"
    ]
  },
  {
    "objectID": "04-什么是函数.html#参数",
    "href": "04-什么是函数.html#参数",
    "title": "4  什么是函数？",
    "section": "4.2 参数",
    "text": "4.2 参数\n每个函数都有特定的参数（argument），而且这些参数是有要求的，不按照规定写就会报错。\n比如有的参数需要你提供数值型的向量（数据类型会在后面几章介绍）给它，如果你提供的不是数值型向量，那么它就会报错；有的参数不能有NA或者缺失值，如果你提供的数据里有NA或者缺失值，那么它肯定会报错。这个东西是很机械的，不可更改，不按照要求写必然报错！\n如何知道每个参数的具体要求及函数的使用方法呢？我们可以直接查看帮助文档。帮助文档是函数的开发者按照一定的要求写的、能够让使用者快速理解函数用法的文档。\n绝大多数R语言中的函数都可以通过?xxx或者help(xxx)查看函数的帮助文档（自己安装的R包需要先加载），比如：\n\n# 以下两种方法都可以\n?lines\n\n# 或者\nhelp(\"lines\")\n\n当你运行上面的代码后，在Rstudio右侧help面板中会出现该函数的帮助文档，如下图所示：\n\n帮助文档是学习函数用法的最好方法，这也是你以后最常用的学习方法（当然有些帮助文档写的很烂）。\n很多人一看到英文就头大，那么这样的话你可能不适合学R语言，绝大多数函数的帮助文档和报错信息都是只需要英语4级水平即可理解的，没有任何难度，只需要你认真去读一读就能得到很多信息！\n比如，在上面这个帮助文档中：\n\n在这个帮助文档中，首先是Description，这部分会简要的告诉你这个函数是干啥的，比如这个函数的描述告诉你，这个函数可以使用不同方式给出的坐标，并把点连接成线。\n下面是Usage，这部分主要是展示这个函数的基本用法，以及有哪些参数，比如lines有两种用法，要么是lines(x, ...)，要么是lines(x, y = NULL, type = \"l\", ...)。\n再往下是Arguments，这部分是参数的细节，这部分会详细告诉你，每个参数接受哪种类型等。比如x,y，这两个参数需要一个vectors，也就是一个向量，此时你必须提供一个向量，如果提供其他类型，必然报错！\n再往下是一些需要注意的细节（Details）以及参考文献（References）等，最后是使用示例（Examples），这个示例可以直接运行，你也可以通过示例学习函数的用法。\n\n如果现在的你还是无法理解帮助文档的内容，也不用着急，因为初学都是这样的，随着学习的深入，你会越来越得心应手。\n很多初学者喜欢直接复制粘贴别人的代码，然后直接把数据换成自己的，绝大多数都会遇到报错，无法运行。主要原因就是不知道每个函数的具体要求，别人的代码是按照要求写的，自然可以运行，你的东西和别人不一样，不符合函数的要求，必然报错。\n以下是一些常用的帮助函数，你可以自己输入一下试试看，多敲代码是学习编程的最好方法：\n\n自己学习以上代码时记得把函数的名字换成自己想看的，你输入上面的foo必报错！\n关于R包的函数使用时的常见错误：",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>什么是函数？</span>"
    ]
  },
  {
    "objectID": "05-导入导出文件.html",
    "href": "05-导入导出文件.html",
    "title": "5  导入导出文件",
    "section": "",
    "text": "5.1 工作路径\n首先说下工作路径的问题，当前工作目录（working-directory）是你的R语言读取和保存文件的默认位置。\n这个默认位置是可以更改的，在第2章介绍过：点击Tools-Global Options，按照以下图片所示进行设置，方框里的就是默认工作目录。\n确定好你的R语言的工作目录以及你的文件的存放位置后，才能顺利读取文件，比如你的工作目录在D盘，但是你的文件在E盘，如果读取时没有明确指定文件位置，就会报错。\n打开RStudio后，可以使用getwd()查看当前工作目录：\ngetwd()\n## [1] \"F:/R_books/R_beginners\"\n以上结果说明我在：F盘-R_books-R_beginners这个文件夹里。\n也可以查看Console（控制台）的左上角获取当前的工作目录：\n可以使用setwd()重新设置当前工作目录：\n# 设置为F盘R_books文件夹\nsetwd(\"F:/R_books/\")\n确认当前工作目录是非常重要的，尤其是在读取或者保存文件的时候，你总得知道你目前在哪个文件夹吧？\n以下是一些用于管理R工作路径的函数：\n除此之外还有一些可以和当前工作目录交互的函数，比如列出当前工作目录下的所有文件和文件夹：\nlist.files()\n##  [1] \"_book\"                     \"_language.yml\"            \n##  [3] \"_quarto.yml\"               \"01-R和Rstudio.qmd\"        \n##  [5] \"02-第一次上手使用.qmd\"     \"03-R包安装.qmd\"           \n##  [7] \"04-什么是函数.qmd\"         \"05-导入导出文件.qmd\"      \n##  [9] \"05-导入导出文件.rmarkdown\" \"06-R中的数据类型.qmd\"     \n## [11] \"0601-数据结构.qmd\"         \"0602-类型判断和转换.qmd\"  \n## [13] \"0603-数值和字符串处理.qmd\" \"07-控制结构和自编函数.qmd\"\n## [15] \"08-apply系列.qmd\"          \"09-行列操作.qmd\"          \n## [17] \"10-表格合并.qmd\"           \"11-长宽转换.qmd\"          \n## [19] \"12-日期时间处理.qmd\"       \"9999-appendix.qmd\"        \n## [21] \"brca_clin.xlsx\"            \"brca_filter.R\"            \n## [23] \"datasets\"                  \"figs\"                     \n## [25] \"firsttest.R\"               \"index.qmd\"                \n## [27] \"LICENSE\"                   \"mystats.R\"                \n## [29] \"r-beginners.qmd\"           \"r-beginners.Rproj\"        \n## [31] \"README.md\"\n\n# 类似的函数还有dir()\n还可以只列出符合要求的文件，比如列出所有以qmd结尾的文件：\nlist.files(pattern = \"qmd$\") # 涉及正则表达式\n##  [1] \"01-R和Rstudio.qmd\"         \"02-第一次上手使用.qmd\"    \n##  [3] \"03-R包安装.qmd\"            \"04-什么是函数.qmd\"        \n##  [5] \"05-导入导出文件.qmd\"       \"06-R中的数据类型.qmd\"     \n##  [7] \"0601-数据结构.qmd\"         \"0602-类型判断和转换.qmd\"  \n##  [9] \"0603-数值和字符串处理.qmd\" \"07-控制结构和自编函数.qmd\"\n## [11] \"08-apply系列.qmd\"          \"09-行列操作.qmd\"          \n## [13] \"10-表格合并.qmd\"           \"11-长宽转换.qmd\"          \n## [15] \"12-日期时间处理.qmd\"       \"9999-appendix.qmd\"        \n## [17] \"index.qmd\"                 \"r-beginners.qmd\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>导入导出文件</span>"
    ]
  },
  {
    "objectID": "05-导入导出文件.html#读取文件",
    "href": "05-导入导出文件.html#读取文件",
    "title": "5  导入导出文件",
    "section": "5.2 读取文件",
    "text": "5.2 读取文件\n\n5.2.1 Excel\n这个格式太常见了，大家日常生活用的大部分都是这种格式。\n比如有这么一个excel文件：brca_clin.xlsx，这个数据是我从TCGA官网下载的乳腺癌患者的临床信息，包含：患者ID、样本ID、样本类型（normal还是tumor？）、年龄、性别等。\n它里面的内容是这样的：\n\n\n\n示例excel\n\n\n现在我们需要把它读入R里面。\n我推荐你使用readxl包读取Excel文件。这个R包并不是“出厂自带”的，因此我们需要先安装这个R包（提醒：你更改镜像了吗？）：\n\ninstall.packages(\"readxl\")\n\n安装好之后，我们需要加载这个R包才能使用：\n\nlibrary(readxl)\n\n然后我们就可以读取这个文件了，读取时，你必须指明你的文件在哪里！这就涉及到工作路径的问题了，如果你的文件和当前工作路径不在同一个文件夹下，那么一定要指定你的文件在哪里。如果文件路径没写对，就会出现下面这种类似的报错，一般情况下，它会告诉你：你的路径没写对、或者找不到这个文件、这个文件不存在、不能打开连接等等错误。\n\n# col_names = TRUE 表示这个文件是有列名的\nbrca_clin &lt;- read_xlsx(\"E:/brca_clin.xlsx\", col_names = TRUE)\n\nError: `path` does not exist: ‘E:/brca_clin.xlsx’\n\n这个时候你就要去确认下，你的这个brca_clin.xlsx文件到底在哪里！当你给它正确的路径时，它就不会报错。比如这个示例文件位于F盘-R_books文件夹-R_beginners文件夹中，你写对了就能读进来：\n\n# 读取\nbrca_clin &lt;- read_xlsx(\"F:/R_books/R_beginners/brca_clin.xlsx\", col_names = T)\n\nbrca_clin[1:5,2:5] # 查看第1-5行，第2-5列\n## # A tibble: 5 × 4\n##   patient      sample           sample_type         initial_weight\n##   &lt;chr&gt;        &lt;chr&gt;            &lt;chr&gt;                        &lt;dbl&gt;\n## 1 TCGA-BH-A1FC TCGA-BH-A1FC-11A Solid Tissue Normal            260\n## 2 TCGA-AC-A2FM TCGA-AC-A2FM-11B Solid Tissue Normal            220\n## 3 TCGA-BH-A0DO TCGA-BH-A0DO-11A Solid Tissue Normal            130\n## 4 TCGA-E2-A1BC TCGA-E2-A1BC-11A Solid Tissue Normal            260\n## 5 TCGA-BH-A0BJ TCGA-BH-A0BJ-11A Solid Tissue Normal            200\n\n这样我们就成功把文件读取到R里面了，并且这个文件的内容被存储在brca_clin这个对象（object）中，此时你可以在Environment面板中看到brca_clin这个对象。\n上面代码中的F:/R_books/R_beginners/brca_clin.xlsx这种路径写法被称为绝对路径，意思是：从最开始的位置一直往下写，除此之外，还有一种写法是相对路径，即从相对于当前路径的位置开始写。\n比如，我这段脚本的当前工作路径位于F盘-R_books文件夹-R_beginners文件夹中（还记得怎么查看当前工作路径吗？getwd()），和brca_clin.xlsx这个文件同处于一个文件夹中，那么在读取时也可以这么写：\n\n# 因为在同一路径下，所以可以直接写名字\nbrca_clin &lt;- read_xlsx(\"brca_clin.xlsx\", col_names = T)\n\n# 或者\nbrca_clin &lt;- read_xlsx(\"./brca_clin.xlsx\", col_names = T)\n\n其中的./表示当前工作路径，可以省略不写。\n如果一个名字是brca_expr.xlsx的文件位于F盘-R_books文件夹-R_beginners文件夹-datasets文件夹中，也就是说datasets这个文件夹是和当前工作路径同一级的，但是我们要读取的文件在datasets文件夹中，那么在读取时就可以这么写：\n\n# 加了一个datasets/\nbrca_expr &lt;- read_xlsx(\"datasets/brca_expr.xlsx\", col_names = T)\n\n如果一个名字是brca_expr_不要删.xlsx的文件位于F盘-R_books文件夹中，也就是说位于当前工作路径的上一级文件夹中，如果要读取这个文件，可以使用以下代码：\n\nbrca_expr_不要删 &lt;- read_xlsx(\"../brca_expr_不要删.xlsx\", col_names = T)\n\n其中，../表示上一级目录（当前工作目录的上一级），不能省略。\n以上是对于路径的简单介绍，大家要自己多加练习，仔细体会。\n相对路径写起来更加简单，所以以下示例都会用相对路径进行演示。\n除了路径问题，对于新手还有几个点需要注意：\n\n注意/，\\，\"\"，''，这些标点一定要在英文状态下输入！R语言的文件路径只支持/或者\\\\，不能是\\；\n这个示例文件是有列名的，所以在读取的时候加了col_names=T这个参数，没有列名就要改成F；\n如果你的数据使用了合并/拆分单元格、各种格式、公式等，会报错！复杂的表头在读取时代码也会变得很复杂，建议大家初学时都整理成示例文件这种简单的表头；\n这个文件是.xlsx格式的，如果不是，那你需要用其他函数，比如：使用read_xls()函数读取.xls结尾的文件；每个函数的功能都是有要求的，不能乱用，记得多查看函数的帮助文档。\n如果你读取中文遇到乱码问题，那大概率是遇到了编码问题，这是一个很复杂的问题：\n\n首先你可以通过点击Rstudio中的Tools-Global Options，到达以下界面，把默认编码方式改为utf-8，然后关闭rstudio，重新读取；\n\n\n\n\nutf8编码\n\n\n\n有时直接升级R包/R/rstudio/，重新保存文件为utf-8等方式也可以解决问题；\n如果都不行，直接百度！具体情况具体分析！\n\n\n\n\n5.2.2 csv\ncsv文件是一种逗号分隔文件，打开后和excel看起来一模一样，以下是一个csv文件示例，你不要问为什么看不到逗号……\n\n\n\n示例csv\n\n\n一般推荐把excel文件另存为csv文件，因为方便R语言读取，不需要安装额外的R包也可以读取~\n\n# read.csv是R自带的函数，不用加载R包；header = T 表示这个文件有列名\ncsv &lt;- read.csv(\"datasets/brca_clin.csv\", header = T)\n\ncsv\n##                         barcode      patient           sample\n## 1  TCGA-BH-A1FC-11A-32R-A13Q-07 TCGA-BH-A1FC TCGA-BH-A1FC-11A\n## 2  TCGA-AC-A2FM-11B-32R-A19W-07 TCGA-AC-A2FM TCGA-AC-A2FM-11B\n## 3  TCGA-BH-A0DO-11A-22R-A12D-07 TCGA-BH-A0DO TCGA-BH-A0DO-11A\n## 4  TCGA-E2-A1BC-11A-32R-A12P-07 TCGA-E2-A1BC TCGA-E2-A1BC-11A\n## 5  TCGA-BH-A0BJ-11A-23R-A089-07 TCGA-BH-A0BJ TCGA-BH-A0BJ-11A\n## 6  TCGA-E2-A1LH-11A-22R-A14D-07 TCGA-E2-A1LH TCGA-E2-A1LH-11A\n## 7  TCGA-BH-A1FB-11A-33R-A13Q-07 TCGA-BH-A1FB TCGA-BH-A1FB-11A\n## 8  TCGA-BH-A18M-11A-33R-A12D-07 TCGA-BH-A18M TCGA-BH-A18M-11A\n## 9  TCGA-BH-A0BM-11A-12R-A089-07 TCGA-BH-A0BM TCGA-BH-A0BM-11A\n## 10 TCGA-E2-A153-11A-31R-A12D-07 TCGA-E2-A153 TCGA-E2-A153-11A\n## 11 TCGA-B6-A0RH-01A-21R-A115-07 TCGA-B6-A0RH TCGA-B6-A0RH-01A\n## 12 TCGA-BH-A1FU-01A-11R-A14D-07 TCGA-BH-A1FU TCGA-BH-A1FU-01A\n## 13 TCGA-AR-A0TX-01A-11R-A084-07 TCGA-AR-A0TX TCGA-AR-A0TX-01A\n## 14 TCGA-A1-A0SE-01A-11R-A084-07 TCGA-A1-A0SE TCGA-A1-A0SE-01A\n## 15 TCGA-OL-A5D6-01A-21R-A27Q-07 TCGA-OL-A5D6 TCGA-OL-A5D6-01A\n## 16 TCGA-E2-A1IK-01A-11R-A144-07 TCGA-E2-A1IK TCGA-E2-A1IK-01A\n## 17 TCGA-AN-A0FT-01A-11R-A034-07 TCGA-AN-A0FT TCGA-AN-A0FT-01A\n## 18 TCGA-A2-A3KD-01A-12R-A213-07 TCGA-A2-A3KD TCGA-A2-A3KD-01A\n## 19 TCGA-A2-A0EO-01A-11R-A034-07 TCGA-A2-A0EO TCGA-A2-A0EO-01A\n## 20 TCGA-A2-A04P-01A-31R-A034-07 TCGA-A2-A04P TCGA-A2-A04P-01A\n##            sample_type initial_weight ajcc_pathologic_stage\n## 1  Solid Tissue Normal            260             Stage IIA\n## 2  Solid Tissue Normal            220             Stage IIB\n## 3  Solid Tissue Normal            130               Stage I\n## 4  Solid Tissue Normal            260              Stage IA\n## 5  Solid Tissue Normal            200             Stage IIB\n## 6  Solid Tissue Normal             60               Stage I\n## 7  Solid Tissue Normal            320             Stage IIB\n## 8  Solid Tissue Normal            310            Stage IIIA\n## 9  Solid Tissue Normal            100             Stage IIB\n## 10 Solid Tissue Normal            250             Stage IIB\n## 11       Primary Tumor            130             Stage IIA\n## 12       Primary Tumor            110              Stage IA\n## 13       Primary Tumor            470             Stage IIA\n## 14       Primary Tumor             90               Stage I\n## 15       Primary Tumor            200             Stage IIA\n## 16       Primary Tumor             70             Stage IIA\n## 17       Primary Tumor            130             Stage IIB\n## 18       Primary Tumor            770            Stage IIIA\n## 19       Primary Tumor            200              Stage IA\n## 20       Primary Tumor            250            Stage IIIC\n##    days_to_last_follow_up gender age_at_index\n## 1                      NA female           78\n## 2                      NA female           87\n## 3                    1644 female           78\n## 4                     501 female           63\n## 5                     660 female           41\n## 6                    3247 female           59\n## 7                      NA female           60\n## 8                      NA female           39\n## 9                    1876 female           54\n## 10                    707 female           51\n## 11                   5749 female           51\n## 12                     NA female           44\n## 13                   1972 female           64\n## 14                   1321 female           56\n## 15                    385 female           71\n## 16                   1800 female           71\n## 17                    214 female           63\n## 18                   1206 female           47\n## 19                   2442 female           54\n## 20                     NA female           36\n\n或者用read.table()函数读取。由于该函数可以读取很多格式，而每种文件格式的分隔符并不相同（比如csv文件是逗号分隔，txt文件是Tab分隔），因此在使用该函数时需要指定文件的分隔符：\n\ncsv &lt;- read.table(\"datasets/brca_clin.csv\", header = T,\n                  sep = \",\" # 指定分隔符！\n                  )\n\ncsv\n##                         barcode      patient           sample\n## 1  TCGA-BH-A1FC-11A-32R-A13Q-07 TCGA-BH-A1FC TCGA-BH-A1FC-11A\n## 2  TCGA-AC-A2FM-11B-32R-A19W-07 TCGA-AC-A2FM TCGA-AC-A2FM-11B\n## 3  TCGA-BH-A0DO-11A-22R-A12D-07 TCGA-BH-A0DO TCGA-BH-A0DO-11A\n## 4  TCGA-E2-A1BC-11A-32R-A12P-07 TCGA-E2-A1BC TCGA-E2-A1BC-11A\n## 5  TCGA-BH-A0BJ-11A-23R-A089-07 TCGA-BH-A0BJ TCGA-BH-A0BJ-11A\n## 6  TCGA-E2-A1LH-11A-22R-A14D-07 TCGA-E2-A1LH TCGA-E2-A1LH-11A\n## 7  TCGA-BH-A1FB-11A-33R-A13Q-07 TCGA-BH-A1FB TCGA-BH-A1FB-11A\n## 8  TCGA-BH-A18M-11A-33R-A12D-07 TCGA-BH-A18M TCGA-BH-A18M-11A\n## 9  TCGA-BH-A0BM-11A-12R-A089-07 TCGA-BH-A0BM TCGA-BH-A0BM-11A\n## 10 TCGA-E2-A153-11A-31R-A12D-07 TCGA-E2-A153 TCGA-E2-A153-11A\n## 11 TCGA-B6-A0RH-01A-21R-A115-07 TCGA-B6-A0RH TCGA-B6-A0RH-01A\n## 12 TCGA-BH-A1FU-01A-11R-A14D-07 TCGA-BH-A1FU TCGA-BH-A1FU-01A\n## 13 TCGA-AR-A0TX-01A-11R-A084-07 TCGA-AR-A0TX TCGA-AR-A0TX-01A\n## 14 TCGA-A1-A0SE-01A-11R-A084-07 TCGA-A1-A0SE TCGA-A1-A0SE-01A\n## 15 TCGA-OL-A5D6-01A-21R-A27Q-07 TCGA-OL-A5D6 TCGA-OL-A5D6-01A\n## 16 TCGA-E2-A1IK-01A-11R-A144-07 TCGA-E2-A1IK TCGA-E2-A1IK-01A\n## 17 TCGA-AN-A0FT-01A-11R-A034-07 TCGA-AN-A0FT TCGA-AN-A0FT-01A\n## 18 TCGA-A2-A3KD-01A-12R-A213-07 TCGA-A2-A3KD TCGA-A2-A3KD-01A\n## 19 TCGA-A2-A0EO-01A-11R-A034-07 TCGA-A2-A0EO TCGA-A2-A0EO-01A\n## 20 TCGA-A2-A04P-01A-31R-A034-07 TCGA-A2-A04P TCGA-A2-A04P-01A\n##            sample_type initial_weight ajcc_pathologic_stage\n## 1  Solid Tissue Normal            260             Stage IIA\n## 2  Solid Tissue Normal            220             Stage IIB\n## 3  Solid Tissue Normal            130               Stage I\n## 4  Solid Tissue Normal            260              Stage IA\n## 5  Solid Tissue Normal            200             Stage IIB\n## 6  Solid Tissue Normal             60               Stage I\n## 7  Solid Tissue Normal            320             Stage IIB\n## 8  Solid Tissue Normal            310            Stage IIIA\n## 9  Solid Tissue Normal            100             Stage IIB\n## 10 Solid Tissue Normal            250             Stage IIB\n## 11       Primary Tumor            130             Stage IIA\n## 12       Primary Tumor            110              Stage IA\n## 13       Primary Tumor            470             Stage IIA\n## 14       Primary Tumor             90               Stage I\n## 15       Primary Tumor            200             Stage IIA\n## 16       Primary Tumor             70             Stage IIA\n## 17       Primary Tumor            130             Stage IIB\n## 18       Primary Tumor            770            Stage IIIA\n## 19       Primary Tumor            200              Stage IA\n## 20       Primary Tumor            250            Stage IIIC\n##    days_to_last_follow_up gender age_at_index\n## 1                      NA female           78\n## 2                      NA female           87\n## 3                    1644 female           78\n## 4                     501 female           63\n## 5                     660 female           41\n## 6                    3247 female           59\n## 7                      NA female           60\n## 8                      NA female           39\n## 9                    1876 female           54\n## 10                    707 female           51\n## 11                   5749 female           51\n## 12                     NA female           44\n## 13                   1972 female           64\n## 14                   1321 female           56\n## 15                    385 female           71\n## 16                   1800 female           71\n## 17                    214 female           63\n## 18                   1206 female           47\n## 19                   2442 female           54\n## 20                     NA female           36\n\n是不是很简单，注意点和excel一样。\n\n\n\n\n\n\n注释\n\n\n\nread.table()函数是一个通用的读取表格型数据的函数，它既可以读取csv文件，又可以读取txt文件，只要指定不同的分隔符即可。\n\n\n\n\n5.2.3 txt\ntxt文件也是我们常见的文件类型，通常这种数据也是可以直接读取的，不需要额外安装R包。\n现在我们有一个这样的txt文件，它看起来不规整，但其实是规整的哦，不要被表象迷惑，也千万不要试图用空格键把它对齐！！\n\n\n\ntxt文件\n\n\ntxt是tab键分隔的文件，在读取时，一定要指定分隔符：\n\ntmp &lt;- read.table(\"datasets/brca_clin.txt\",\n                  sep = \"\\t\", # 必须要指定分隔符：\\t，表示Tab键分隔\n                  header = T)\ntmp\n##                         barcode      patient           sample\n## 1  TCGA-BH-A1FC-11A-32R-A13Q-07 TCGA-BH-A1FC TCGA-BH-A1FC-11A\n## 2  TCGA-AC-A2FM-11B-32R-A19W-07 TCGA-AC-A2FM TCGA-AC-A2FM-11B\n## 3  TCGA-BH-A0DO-11A-22R-A12D-07 TCGA-BH-A0DO TCGA-BH-A0DO-11A\n## 4  TCGA-E2-A1BC-11A-32R-A12P-07 TCGA-E2-A1BC TCGA-E2-A1BC-11A\n## 5  TCGA-BH-A0BJ-11A-23R-A089-07 TCGA-BH-A0BJ TCGA-BH-A0BJ-11A\n## 6  TCGA-E2-A1LH-11A-22R-A14D-07 TCGA-E2-A1LH TCGA-E2-A1LH-11A\n## 7  TCGA-BH-A1FB-11A-33R-A13Q-07 TCGA-BH-A1FB TCGA-BH-A1FB-11A\n## 8  TCGA-BH-A18M-11A-33R-A12D-07 TCGA-BH-A18M TCGA-BH-A18M-11A\n## 9  TCGA-BH-A0BM-11A-12R-A089-07 TCGA-BH-A0BM TCGA-BH-A0BM-11A\n## 10 TCGA-E2-A153-11A-31R-A12D-07 TCGA-E2-A153 TCGA-E2-A153-11A\n## 11 TCGA-B6-A0RH-01A-21R-A115-07 TCGA-B6-A0RH TCGA-B6-A0RH-01A\n## 12 TCGA-BH-A1FU-01A-11R-A14D-07 TCGA-BH-A1FU TCGA-BH-A1FU-01A\n## 13 TCGA-AR-A0TX-01A-11R-A084-07 TCGA-AR-A0TX TCGA-AR-A0TX-01A\n## 14 TCGA-A1-A0SE-01A-11R-A084-07 TCGA-A1-A0SE TCGA-A1-A0SE-01A\n## 15 TCGA-OL-A5D6-01A-21R-A27Q-07 TCGA-OL-A5D6 TCGA-OL-A5D6-01A\n## 16 TCGA-E2-A1IK-01A-11R-A144-07 TCGA-E2-A1IK TCGA-E2-A1IK-01A\n## 17 TCGA-AN-A0FT-01A-11R-A034-07 TCGA-AN-A0FT TCGA-AN-A0FT-01A\n## 18 TCGA-A2-A3KD-01A-12R-A213-07 TCGA-A2-A3KD TCGA-A2-A3KD-01A\n## 19 TCGA-A2-A0EO-01A-11R-A034-07 TCGA-A2-A0EO TCGA-A2-A0EO-01A\n## 20 TCGA-A2-A04P-01A-31R-A034-07 TCGA-A2-A04P TCGA-A2-A04P-01A\n##            sample_type initial_weight ajcc_pathologic_stage\n## 1  Solid Tissue Normal            260             Stage IIA\n## 2  Solid Tissue Normal            220             Stage IIB\n## 3  Solid Tissue Normal            130               Stage I\n## 4  Solid Tissue Normal            260              Stage IA\n## 5  Solid Tissue Normal            200             Stage IIB\n## 6  Solid Tissue Normal             60               Stage I\n## 7  Solid Tissue Normal            320             Stage IIB\n## 8  Solid Tissue Normal            310            Stage IIIA\n## 9  Solid Tissue Normal            100             Stage IIB\n## 10 Solid Tissue Normal            250             Stage IIB\n## 11       Primary Tumor            130             Stage IIA\n## 12       Primary Tumor            110              Stage IA\n## 13       Primary Tumor            470             Stage IIA\n## 14       Primary Tumor             90               Stage I\n## 15       Primary Tumor            200             Stage IIA\n## 16       Primary Tumor             70             Stage IIA\n## 17       Primary Tumor            130             Stage IIB\n## 18       Primary Tumor            770            Stage IIIA\n## 19       Primary Tumor            200              Stage IA\n## 20       Primary Tumor            250            Stage IIIC\n##    days_to_last_follow_up gender age_at_index\n## 1                      NA female           78\n## 2                      NA female           87\n## 3                    1644 female           78\n## 4                     501 female           63\n## 5                     660 female           41\n## 6                    3247 female           59\n## 7                      NA female           60\n## 8                      NA female           39\n## 9                    1876 female           54\n## 10                    707 female           51\n## 11                   5749 female           51\n## 12                     NA female           44\n## 13                   1972 female           64\n## 14                   1321 female           56\n## 15                    385 female           71\n## 16                   1800 female           71\n## 17                    214 female           63\n## 18                   1206 female           47\n## 19                   2442 female           54\n## 20                     NA female           36\n\n\n\n5.2.4 SPSS\n如果是spss软件产生的.sav文件，可以使用foreign包中的read.spss()函数读取，或者使用haven包中的read_sav()函数。\n这两个包在使用前需要先安装，安装过程这里就不演示了。\n\n# foreign包读取\nlibrary(foreign)\nspss &lt;- foreign::read.spss(\"datasets/例03-05.sav\",to.data.frame = T)\n\nspss\n##    no  hb\n## 1   1 112\n## 2   2 137\n## 3   3 129\n## 4   4 126\n## 5   5  88\n## 6   6  90\n## 7   7 105\n## 8   8 178\n## 9   9 130\n## 10 10 128\n## 11 11 126\n## 12 12 103\n## 13 13 172\n## 14 14 116\n## 15 15 125\n## 16 16  90\n## 17 17  96\n## 18 18 162\n## 19 19 157\n## 20 20 151\n## 21 21 135\n## 22 22 113\n## 23 23 175\n## 24 24 129\n## 25 25 165\n## 26 26 171\n## 27 27 128\n## 28 28 128\n## 29 29 160\n## 30 30 110\n## 31 31 140\n## 32 32 163\n## 33 33 100\n## 34 34 129\n## 35 35 116\n## 36 36 127\n\n\n\n\n\n\n\n注释\n\n\n\n这里的foreign::read.spss()使用了包的名字::函数名字这种方法，意思是指定使用foreign中的read.spss()函数。有时候不同的R包中会有相同名字的函数，使用这种方法可以避免混淆。\n\n\n\n# haven包读取\nlibrary(haven)\nspss &lt;- read_sav(\"datasets/例03-05.sav\")\n\nspss\n## # A tibble: 36 × 2\n##       no    hb\n##    &lt;dbl&gt; &lt;dbl&gt;\n##  1     1   112\n##  2     2   137\n##  3     3   129\n##  4     4   126\n##  5     5    88\n##  6     6    90\n##  7     7   105\n##  8     8   178\n##  9     9   130\n## 10    10   128\n## # ℹ 26 more rows\n\n这个例子是比较简单的，有时候需要指定特定的编码方式，可以通过使用?read_sav/?read.spss查看更改编码的方式。\n\nhaven这个包是专门设计用来读取spss/SAS/STATA格式的文件的。\n\n\n\n5.2.5 rdata\n如果是rdata/Rdata/RData文件，这个是R自带的格式，大小写不影响，都能识别，直接load()即可，但是要注意一定要写对文件路径！或者也可以直接双击rdata/Rdata/RData文件，或者选中文件-单击鼠标右键-打开方式-选择Rstudio。\n如果要读取一个名字为brca_example.rdata的文件，它位于datasets这个文件夹（这个文件夹是和当前工作目录同一级的）中，可以使用以下代码：\n\n# 直接加载\nload(file = \"datasets/brca_example.rdata\")\n\n如果是rds文件，这个也是R常用的格式，使用readRDS()函数即可，也要注意文件路径。\n\n# 注意要取一个名字\ntmp &lt;- readRDS(file = \"datasets/brca_example.rds\") \n\n常见的就是这些，当你掌握这些简单的之后，你可以尝试更加复杂的，以后肯定也会遇到，不过有了这些简单的作为基础，相信你能更快的解决这类问题。",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>导入导出文件</span>"
    ]
  },
  {
    "objectID": "05-导入导出文件.html#查看文件",
    "href": "05-导入导出文件.html#查看文件",
    "title": "5  导入导出文件",
    "section": "5.3 查看文件",
    "text": "5.3 查看文件\n下面是一些常用的用于帮助检查数据的函数（后面的章节还会继续介绍）：\n\ndim(brca_clin)       # 查看数据有多少行多少列，dim是dimension的缩写\n## [1] 20  9\nstr(brca_clin)       # 查看数据的结构，几行几列？数据类型？\n## 'data.frame':    20 obs. of  9 variables:\n##  $ barcode               : chr  \"TCGA-BH-A1FC-11A-32R-A13Q-07\" \"TCGA-AC-A2FM-11B-32R-A19W-07\" \"TCGA-BH-A0DO-11A-22R-A12D-07\" \"TCGA-E2-A1BC-11A-32R-A12P-07\" ...\n##  $ patient               : chr  \"TCGA-BH-A1FC\" \"TCGA-AC-A2FM\" \"TCGA-BH-A0DO\" \"TCGA-E2-A1BC\" ...\n##  $ sample                : chr  \"TCGA-BH-A1FC-11A\" \"TCGA-AC-A2FM-11B\" \"TCGA-BH-A0DO-11A\" \"TCGA-E2-A1BC-11A\" ...\n##  $ sample_type           : chr  \"Solid Tissue Normal\" \"Solid Tissue Normal\" \"Solid Tissue Normal\" \"Solid Tissue Normal\" ...\n##  $ initial_weight        : num  260 220 130 260 200 60 320 310 100 250 ...\n##  $ ajcc_pathologic_stage : chr  \"Stage IIA\" \"Stage IIB\" \"Stage I\" \"Stage IA\" ...\n##  $ days_to_last_follow_up: int  NA NA 1644 501 660 3247 NA NA 1876 707 ...\n##  $ gender                : chr  \"female\" \"female\" \"female\" \"female\" ...\n##  $ age_at_index          : int  78 87 78 63 41 59 60 39 54 51 ...\nclass(brca_clin)     # 数据类型\n## [1] \"data.frame\"\ncolnames(brca_clin)  # 查看列名\n## [1] \"barcode\"                \"patient\"                \"sample\"                \n## [4] \"sample_type\"            \"initial_weight\"         \"ajcc_pathologic_stage\" \n## [7] \"days_to_last_follow_up\" \"gender\"                 \"age_at_index\"\nnames(brca_clin)     # 查看列名\n## [1] \"barcode\"                \"patient\"                \"sample\"                \n## [4] \"sample_type\"            \"initial_weight\"         \"ajcc_pathologic_stage\" \n## [7] \"days_to_last_follow_up\" \"gender\"                 \"age_at_index\"\nrownames(brca_clin)  # 查看行名\n##  [1] \"TCGA-BH-A1FC-11A-32R-A13Q-07\" \"TCGA-AC-A2FM-11B-32R-A19W-07\"\n##  [3] \"TCGA-BH-A0DO-11A-22R-A12D-07\" \"TCGA-E2-A1BC-11A-32R-A12P-07\"\n##  [5] \"TCGA-BH-A0BJ-11A-23R-A089-07\" \"TCGA-E2-A1LH-11A-22R-A14D-07\"\n##  [7] \"TCGA-BH-A1FB-11A-33R-A13Q-07\" \"TCGA-BH-A18M-11A-33R-A12D-07\"\n##  [9] \"TCGA-BH-A0BM-11A-12R-A089-07\" \"TCGA-E2-A153-11A-31R-A12D-07\"\n## [11] \"TCGA-B6-A0RH-01A-21R-A115-07\" \"TCGA-BH-A1FU-01A-11R-A14D-07\"\n## [13] \"TCGA-AR-A0TX-01A-11R-A084-07\" \"TCGA-A1-A0SE-01A-11R-A084-07\"\n## [15] \"TCGA-OL-A5D6-01A-21R-A27Q-07\" \"TCGA-E2-A1IK-01A-11R-A144-07\"\n## [17] \"TCGA-AN-A0FT-01A-11R-A034-07\" \"TCGA-A2-A3KD-01A-12R-A213-07\"\n## [19] \"TCGA-A2-A0EO-01A-11R-A034-07\" \"TCGA-A2-A04P-01A-31R-A034-07\"\nhead(brca_clin)      # 查看前6行数据\n##                                                   barcode      patient\n## TCGA-BH-A1FC-11A-32R-A13Q-07 TCGA-BH-A1FC-11A-32R-A13Q-07 TCGA-BH-A1FC\n## TCGA-AC-A2FM-11B-32R-A19W-07 TCGA-AC-A2FM-11B-32R-A19W-07 TCGA-AC-A2FM\n## TCGA-BH-A0DO-11A-22R-A12D-07 TCGA-BH-A0DO-11A-22R-A12D-07 TCGA-BH-A0DO\n## TCGA-E2-A1BC-11A-32R-A12P-07 TCGA-E2-A1BC-11A-32R-A12P-07 TCGA-E2-A1BC\n## TCGA-BH-A0BJ-11A-23R-A089-07 TCGA-BH-A0BJ-11A-23R-A089-07 TCGA-BH-A0BJ\n## TCGA-E2-A1LH-11A-22R-A14D-07 TCGA-E2-A1LH-11A-22R-A14D-07 TCGA-E2-A1LH\n##                                        sample         sample_type\n## TCGA-BH-A1FC-11A-32R-A13Q-07 TCGA-BH-A1FC-11A Solid Tissue Normal\n## TCGA-AC-A2FM-11B-32R-A19W-07 TCGA-AC-A2FM-11B Solid Tissue Normal\n## TCGA-BH-A0DO-11A-22R-A12D-07 TCGA-BH-A0DO-11A Solid Tissue Normal\n## TCGA-E2-A1BC-11A-32R-A12P-07 TCGA-E2-A1BC-11A Solid Tissue Normal\n## TCGA-BH-A0BJ-11A-23R-A089-07 TCGA-BH-A0BJ-11A Solid Tissue Normal\n## TCGA-E2-A1LH-11A-22R-A14D-07 TCGA-E2-A1LH-11A Solid Tissue Normal\n##                              initial_weight ajcc_pathologic_stage\n## TCGA-BH-A1FC-11A-32R-A13Q-07            260             Stage IIA\n## TCGA-AC-A2FM-11B-32R-A19W-07            220             Stage IIB\n## TCGA-BH-A0DO-11A-22R-A12D-07            130               Stage I\n## TCGA-E2-A1BC-11A-32R-A12P-07            260              Stage IA\n## TCGA-BH-A0BJ-11A-23R-A089-07            200             Stage IIB\n## TCGA-E2-A1LH-11A-22R-A14D-07             60               Stage I\n##                              days_to_last_follow_up gender age_at_index\n## TCGA-BH-A1FC-11A-32R-A13Q-07                     NA female           78\n## TCGA-AC-A2FM-11B-32R-A19W-07                     NA female           87\n## TCGA-BH-A0DO-11A-22R-A12D-07                   1644 female           78\n## TCGA-E2-A1BC-11A-32R-A12P-07                    501 female           63\n## TCGA-BH-A0BJ-11A-23R-A089-07                    660 female           41\n## TCGA-E2-A1LH-11A-22R-A14D-07                   3247 female           59\ntail(brca_clin)      # 查看最后6行数据\n##                                                   barcode      patient\n## TCGA-OL-A5D6-01A-21R-A27Q-07 TCGA-OL-A5D6-01A-21R-A27Q-07 TCGA-OL-A5D6\n## TCGA-E2-A1IK-01A-11R-A144-07 TCGA-E2-A1IK-01A-11R-A144-07 TCGA-E2-A1IK\n## TCGA-AN-A0FT-01A-11R-A034-07 TCGA-AN-A0FT-01A-11R-A034-07 TCGA-AN-A0FT\n## TCGA-A2-A3KD-01A-12R-A213-07 TCGA-A2-A3KD-01A-12R-A213-07 TCGA-A2-A3KD\n## TCGA-A2-A0EO-01A-11R-A034-07 TCGA-A2-A0EO-01A-11R-A034-07 TCGA-A2-A0EO\n## TCGA-A2-A04P-01A-31R-A034-07 TCGA-A2-A04P-01A-31R-A034-07 TCGA-A2-A04P\n##                                        sample   sample_type initial_weight\n## TCGA-OL-A5D6-01A-21R-A27Q-07 TCGA-OL-A5D6-01A Primary Tumor            200\n## TCGA-E2-A1IK-01A-11R-A144-07 TCGA-E2-A1IK-01A Primary Tumor             70\n## TCGA-AN-A0FT-01A-11R-A034-07 TCGA-AN-A0FT-01A Primary Tumor            130\n## TCGA-A2-A3KD-01A-12R-A213-07 TCGA-A2-A3KD-01A Primary Tumor            770\n## TCGA-A2-A0EO-01A-11R-A034-07 TCGA-A2-A0EO-01A Primary Tumor            200\n## TCGA-A2-A04P-01A-31R-A034-07 TCGA-A2-A04P-01A Primary Tumor            250\n##                              ajcc_pathologic_stage days_to_last_follow_up\n## TCGA-OL-A5D6-01A-21R-A27Q-07             Stage IIA                    385\n## TCGA-E2-A1IK-01A-11R-A144-07             Stage IIA                   1800\n## TCGA-AN-A0FT-01A-11R-A034-07             Stage IIB                    214\n## TCGA-A2-A3KD-01A-12R-A213-07            Stage IIIA                   1206\n## TCGA-A2-A0EO-01A-11R-A034-07              Stage IA                   2442\n## TCGA-A2-A04P-01A-31R-A034-07            Stage IIIC                     NA\n##                              gender age_at_index\n## TCGA-OL-A5D6-01A-21R-A27Q-07 female           71\n## TCGA-E2-A1IK-01A-11R-A144-07 female           71\n## TCGA-AN-A0FT-01A-11R-A034-07 female           63\n## TCGA-A2-A3KD-01A-12R-A213-07 female           47\n## TCGA-A2-A0EO-01A-11R-A034-07 female           54\n## TCGA-A2-A04P-01A-31R-A034-07 female           36\nrm(brca_clin)        # 从当前环境（environment）中清除对象",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>导入导出文件</span>"
    ]
  },
  {
    "objectID": "05-导入导出文件.html#保存文件",
    "href": "05-导入导出文件.html#保存文件",
    "title": "5  导入导出文件",
    "section": "5.4 保存文件",
    "text": "5.4 保存文件\n保存文件我觉得比读取文件要简单一点，如果你实在不知道怎么保存，有个简便方法，在Environment面板中有个保存按钮，点击即可保存所有对象到RData文件中：\n\n\n\n一键保存所有\n\n\n直接点击保存，就会在你当前工作目录产生一个RData文件，下次直接load或者双击即可快速打开你的所有东西！不过不建议这么做，因为这个RData文件可能会很大。\n不太推荐直接保存为excel格式，建议使用csv格式。\n如果是想把tmp这个对象保存为csv文件，可以使用write.csv()或者write.table()，write.table()和read.table()类似，也是可以把文件保存为多种格式，只需要指定分隔符即可。\n\n# 把tmp这个数据框保存为csv\nwrite.csv(tmp, # 要保存的对象\n          file = \"datasets/111.csv\", #保存到哪里？格式？ .csv不要忘记！\n          quote = F, # 不加引号\n          row.names = F # 有没有行名\n          )\n\n# 或者使用write.table\nwrite.table(tmp,\n            file = \"datasets/111.csv\", #保存到哪里，保存为什么格式，.csv不要忘记！\n            sep = \",\",  # 必须指定分隔符！\n            quote = F, # 不加引号\n            row.names = F, # 行名\n            col.names = T # 列名\n            )\n\n如果要保存为或者txt文件，也可以使用write.table()：\n\nwrite.table(tmp,\n            file = \"datasets/222.txt\",\n            sep = \"\\t\", # 千万别忘记指定分隔符！\n            quote = F, # 不加引号\n            row.names = F, # 行名\n            col.names = T # 列名\n            )\n\n如果要保存为rdata/Rdata/RData文件，直接用save()函数，简单方便，下次直接load即可，还可以同时保存多个对象！！\n推荐大家平时保存时选择rdata/Rdata/RData/rds，方便，官方！\n\nsave(tmp,csv, # 同时保存多个对象\n     file = \"datasets/tmp1.rdata\") # 保存文件的位置和名字\n\n保存为rds格式：\n\n# rds格式不能同时保存多个对象\nsaveRDS(tmp, file = \"datasets/tmp.rds\")\n\n以上就是常见的数据读取和保存，最后再说一遍注意点：\n\n输入法需要是英文状态下的标点符号！\n文件路径必须写对！\n注意不同文件的分隔符！\n不同文件使用不同函数读取/写出！不要所有的格式都用一个函数！\n如果碰到不知道的格式读取，直接百度！99.999%能解决你的问题！\n\n希望大家以后再也不要碰到数据读取问题！\n数据读取之后，下一步就是对数据进行各种各样的操作，这也是R语言中最重要的基础知识。不过在学习数据操作之前，我们先学习一下R语言中的数据类型和数据结构。",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>导入导出文件</span>"
    ]
  },
  {
    "objectID": "06-R中的数据类型.html",
    "href": "06-R中的数据类型.html",
    "title": "6  数据类型",
    "section": "",
    "text": "6.1 双精度型\n其实就是小数型：\n# 把一个数字存储到变量my_integer中\nmy_integer &lt;- 5\n\n# 查看数据类型\ntypeof(my_integer)\n## [1] \"double\"\n\n# 把一个小数存储到变量my_float中\nmy_float &lt;- 3.14\ntypeof(my_float) # 查看数据类型\n## [1] \"double\"\n虽然数字5没有小数点，但是它此时依然是double类型。",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "06-R中的数据类型.html#整数型",
    "href": "06-R中的数据类型.html#整数型",
    "title": "6  数据类型",
    "section": "6.2 整数型",
    "text": "6.2 整数型\n整数型也是表示数字的，没有小数点，但是需要在结尾添加L才行：\n\ninteger_variable &lt;- 186L\ntypeof((integer_variable))\n## [1] \"integer\"\n\n其中double和integer被统称为数值型（numeric）。",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "06-R中的数据类型.html#字符型",
    "href": "06-R中的数据类型.html#字符型",
    "title": "6  数据类型",
    "section": "6.3 字符型",
    "text": "6.3 字符型\n是表示文本的一种方式，通常用引号引起来的都是字符型，双引号或者单引号都可以，但必须是英文状态下的引号：\n\n# 把一段文字存储到变量中\nmy_string &lt;- \"Hello, R!\"\n\n# 打印结果\nprint(my_string)\n## [1] \"Hello, R!\"\n\n# 查看类型\ntypeof(my_string)\n## [1] \"character\"",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "06-R中的数据类型.html#逻辑型",
    "href": "06-R中的数据类型.html#逻辑型",
    "title": "6  数据类型",
    "section": "6.4 逻辑型",
    "text": "6.4 逻辑型\n又称为布尔型（boolean），用来表示是或否，只能是TRUE（是）或FALSE（否），而且不能加引号，加了引号就变成字符型了，TRUE可以简写为T，FALSE可以简写为F。\n\n# 把一个逻辑值存储到变量中\nmy_logical &lt;- TRUE\ntypeof(my_logical)\n## [1] \"logical\"\n\n逻辑值是可以运算的，高中都学过的：\nTRUE + TRUE\nTRUE - TRUE\n...\n逻辑运算：\n\nTRUE + TRUE # 当成加减运算时，TRUE是1，FALSE是0！\n## [1] 2\nTRUE - FALSE\n## [1] 1\n\n还有一些逻辑运算符：与，或，非\n与：&\n或：|\n非：!\n不等于：!= # 少用\n\nTRUE | FALSE\n## [1] TRUE\nTRUE & FALSE\n## [1] FALSE",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "06-R中的数据类型.html#类型判断",
    "href": "06-R中的数据类型.html#类型判断",
    "title": "6  数据类型",
    "section": "6.5 类型判断",
    "text": "6.5 类型判断\nis.numeric()   # 是不是数值型\nis.character() # 是不是字符型\nis.double()    # 是不是双精度型\nis.integer()   # 是不是整数型\nis.factor()    # 是不是因子型\nis.complex()   # 是不是复数性\nis.logical()   # 是不是逻辑型",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "06-R中的数据类型.html#数据集",
    "href": "06-R中的数据类型.html#数据集",
    "title": "6  数据类型",
    "section": "6.6 数据集",
    "text": "6.6 数据集\n数据集通常是由不同类型的数据构成的一个矩形格式，每一行表示一个观测（observation），每一列表示一个变量（variable），我们用的最多的数据集是表格型（tabular）的结构，下表是一个医学中常见的病例数据集演示：\n\n不同的行业对于数据集的行和列叫法不同。统计学家称它们为观测（observation）和变量（variable），数据库分析师则称其为记录（record）和字段（field），数据挖掘和机器学习的研究者则把它们叫作示例（example）和属性（attribute）。\n在上表所示的数据集中，PatientID是行标识符（row-identifier）（或者叫“行名”），行名是不能有重复的；AdmDate是日期型变量，Age是连续型变量，Diabetes是名义型变量，Status是有序型变量。\nR中有许多用于存储数据的结构，包括标量、向量、数组、数据框和列表等。上表的结构实际上是R中的数据框（data.frame）。多样化的数据结构赋予了R极其灵活的数据处理能力。\n在上表中，PatientID、AdmDate和Age为数值型（numeric）变量，而Diabetes和Status则为字符型（character）变量。R将实例标识符称为rowmames（行名），将类别型（包括名义型和有序型）变量称为因子（factors）。我们会在下一章中讲解这些内容。",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "0601-数据结构.html",
    "href": "0601-数据结构.html",
    "title": "7  数据结构",
    "section": "",
    "text": "7.1 向量\n向量，vector，就是同一类型的多个元素构成的序列，可以是数值型、字符型、逻辑型等。\n在R中，使用函数c()创建向量：\n# 创建一个名字是a的向量\na &lt;- c(1, 2, 5, 3, 6, -2, 4)\nclass(a) # 查看类型\n## [1] \"numeric\"\n\n# 创建一个名字是b的向量\nb &lt;- c(\"one\", \"two\", \"three\")\n\n# 创建一个名字是d的向量，不用c是为了避免和函数 c() 混淆\nd &lt;- c(TRUE, TRUE, TRUE, FALSE, TRUE, FALSE)\n这里，a是数值型向量，b是字符型向量，而d是逻辑型向量。向量中的值被称为元素（element），比如向量a的第一个元素是1，向量b的第一个元素是\"one\"。\n注意，单个向量中的数据必须拥有相同的类型或模式（数值型、字符型或逻辑型）。同一向量中无法混杂不同类型的数据。??????????",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据结构</span>"
    ]
  },
  {
    "objectID": "0601-数据结构.html#向量",
    "href": "0601-数据结构.html#向量",
    "title": "7  数据结构",
    "section": "",
    "text": "提示\n\n\n\n标量是只含一个元素的向量，例如f &lt;- 3、g &lt;- “US”和h &lt;- TRUE。它们用于保存常量。\n\n\n\n7.1.1 向量操作\n查看向量长度：\n\nlength(d)\n## [1] 6\n\n除了通过c()创建向量，还可以使用seq()（sequence的缩写）创建数值型的向量，比如，创建一个从1~20的向量，并且步长设置为2：\n\nseq(1, 20, 2)\n##  [1]  1  3  5  7  9 11 13 15 17 19\n\n查看前6行/后6行：\n\nhead(seq(1, 20, 2))\n## [1]  1  3  5  7  9 11\ntail(seq(1, 20, 2))\n## [1]  9 11 13 15 17 19\n\n通过在方括号中指定元素的位置，我们可以访问（或者叫提取、查看）向量中的某个元素。例如：a[c(2, 4)]用于提取向量a中的第二个和第四个元素。更多示例如下：\n\n# 创建一个向量，取名为a\na &lt;- c(1, 2, 5, 3, 6, -2, 4)\n\na[3] # 取第3个元素\n## [1] 5\na[c(1,3,5)] # 取第1，3，5个元素\n## [1] 1 5 6\n\na[c(1:3)] # 取第1到第3个元素\n## [1] 1 2 5\na[c(1, 2, 3)] # 和上面结果相同，也是取第1到第3个元素\n## [1] 1 2 5\n\n如果提取不存在的位置，则会返回NA，比如我们提取第10个元素：\n\na[10]\n## [1] NA\n\n如果要替换某个元素，直接提取这个元素并重新赋值即可：\n\n# 把向量a的第1个元素换成 m\na[1] &lt;- \"m\"\na\n## [1] \"m\"  \"2\"  \"5\"  \"3\"  \"6\"  \"-2\" \"4\"\n\n# 同时替换多个元素，注意长度要相同，并且要使用c()放在一个向量中\na[c(1,3,4)] &lt;- c(\"d\",\"e\",\"f\")\na\n## [1] \"d\"  \"2\"  \"e\"  \"f\"  \"6\"  \"-2\" \"4\"\n\n如果要删除某个元素，直接在位置前加负号即可：\n\n# 删除a的第一个元素，结果中第一个元素 d 就被删掉了\na[-1]\n## [1] \"2\"  \"e\"  \"f\"  \"6\"  \"-2\" \"4\"\n\n# 同时删除多个元素\na[c(-1,-2,-3)]\n## [1] \"f\"  \"6\"  \"-2\" \"4\"\n\n如果要继续增加元素，直接使用c()即可：\n\n# 在向量a中添加3个元素，并赋值给a1\na1 &lt;- c(a, \"80\", \"89\", \"90\")\na1\n##  [1] \"d\"  \"2\"  \"e\"  \"f\"  \"6\"  \"-2\" \"4\"  \"80\" \"89\" \"90\"\n\n还可以对向量中的每一个元素取一个名字，比如：\n\n# 创建一个命名向量\nnamed_a &lt;- c(age = 18, bmi = 22, weight = 65)\nnamed_a\n##    age    bmi weight \n##     18     22     65\n\n此时，向量named_a中的3个元素，都有一个独一无二的名字，此时我们还可以通过向量的名字来访问对应的元素：\n\nnamed_a[\"age\"]\n## age \n##  18\n\nnamed_a[\"bmi\"]\n## bmi \n##  22\n\n查看每个元素的名字（如果这是一个命名向量的话）：\n\nnames(named_a)\n## [1] \"age\"    \"bmi\"    \"weight\"\n\n替换元素的名字：\n\n# 替换第一个元素的名字，从age变为height\nnames(named_a)[1] &lt;- \"height\"\nnamed_a\n## height    bmi weight \n##     18     22     65\n\n# 同时替换多个元素的名字\nnames(named_a)[c(1,2)] &lt;- c(\"height\",\"gg\")\nnamed_a\n## height     gg weight \n##     18     22     65\n\n# 同时替换所有元素的名字\nnames(named_a) &lt;- c(\"aa\",\"bb\",\"cc\")\nnamed_a\n## aa bb cc \n## 18 22 65\n\n移除元素的名字：\n\n# 移除元素的名字，注意不能只移除某个元素的名字，要一起移除\nnames(named_a) &lt;- NULL\nnamed_a\n## [1] 18 22 65\n\n如果要对向量排序：\n\n# 创建一个向量a\na &lt;- c(4,1,2,3)\na\n## [1] 4 1 2 3\n\n# 排序，默认按照从小到大\nsort(a)\n## [1] 1 2 3 4\n\n# 按照从大到小的顺序排列\nsort(a, decreasing = T)\n## [1] 4 3 2 1\n\n# 反转顺序\nrev(a)\n## [1] 3 2 1 4\n\norder函数：\n\na &lt;- c(4,1,2,3)\na\n## [1] 4 1 2 3\norder(a)\n## [1] 2 3 4 1\n\na[order(a)] # 等价于sort(a)\n## [1] 1 2 3 4",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据结构</span>"
    ]
  },
  {
    "objectID": "0601-数据结构.html#数据框",
    "href": "0601-数据结构.html#数据框",
    "title": "7  数据结构",
    "section": "7.2 数据框",
    "text": "7.2 数据框\n数据框，data.frame，可能是大家最常用的数据结构了。我们的excel数据读进来一般默认都是数据框结构。\n数据框由不同的行和列构成，不同的列可以是不同类型（数值型、字符型、逻辑型等）的数据，比如可以其中一列是数值型，另一列是逻辑型，另一列是字符型，等。但是同一列中必须是相同的类型。\n数据框可通过函数data.frame()创建，使用方式如下：\n\nmydata &lt;- data.frame(col1, col2, col3,...)\n\n其中的列向量col1、col2、col3等可为任何类型（如字符型、数值型或逻辑型）。\n以下代码会创建一个数据框，这个数据框有4列，第一列的名字是patientID，是数值型；第二列的名字是age，也是数值型；第三列的名字是diabetes，是字符型；第4列的名字是status，也是字符型：\n\n# 创建4个向量\npatientID &lt;- c(1, 2, 3, 4)\nage &lt;- c(25, 34, 28, 52)\ndiabetes &lt;- c(\"Type1\", \"Type2\", \"Type1\", \"Type1\")\nstatus &lt;- c(\"Poor\", \"Improved\", \"Excellent\", \"Poor\")\n\n# 把4个向量放到一个数据框中\npatientdata &lt;- data.frame(patientID, age, diabetes, status)\npatientdata\n##   patientID age diabetes    status\n## 1         1  25    Type1      Poor\n## 2         2  34    Type2  Improved\n## 3         3  28    Type1 Excellent\n## 4         4  52    Type1      Poor\n\n我们首先建立了4个向量，然后使用函数data.frame()将4个向量组合在一起，就变成了一个数据框data.frame，所以你也可以把数据框看成是多个向量的组合。\n当你对这个操作足够熟悉后，你也可以直接这样写：\n\npatientdata &lt;- data.frame(\n  patientID = c(1, 2, 3, 4), \n  age = c(25, 34, 28, 52), \n  diabetes = c(\"Type1\", \"Type2\", \"Type1\", \"Type1\"), \n  status = c(\"Poor\", \"Improved\", \"Excellent\", \"Poor\")\n  )\n\npatientdata\n##   patientID age diabetes    status\n## 1         1  25    Type1      Poor\n## 2         2  34    Type2  Improved\n## 3         3  28    Type1 Excellent\n## 4         4  52    Type1      Poor\n\n查看类型：\n\nclass(patientdata) # 数据框\n## [1] \"data.frame\"\n\n上一章中从外部读取的数据，默认就是数据框结构：\n\nlibrary(readxl)\nbrca_expr &lt;- read_xlsx(\"datasets/brca_expr.xlsx\", col_names = T)\n\nclass(brca_expr)\n## [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n\n\n注释\n\n\n\nreadxl是tidyverse系列R包的的一员，如果你使用了这个系列的R包，那么默认的数据框就不再单单是data.frame类型，还会增加tbl_df和tbl类型，这会在某些操作中报错，千万要注意。\n\n\n如何变成单纯的data.frame类型？只需要使用as.data.frame()函数即可：\n\n# 转换类型\nbrca_expr &lt;- as.data.frame(brca_expr)\nclass(brca_expr) # 查看类型\n## [1] \"data.frame\"\n\n\n7.2.1 数据框操作\n查看数据框的基本信息，比如，有几行几列？每一列是什么类型？列名是什么？\n\n# 查看数据框的维度，dim是dimension的缩写\ndim(patientdata)\n## [1] 4 4\n\n# 查看数据框的结构：str是structure的缩写\nstr(patientdata)\n## 'data.frame':    4 obs. of  4 variables:\n##  $ patientID: num  1 2 3 4\n##  $ age      : num  25 34 28 52\n##  $ diabetes : chr  \"Type1\" \"Type2\" \"Type1\" \"Type1\"\n##  $ status   : chr  \"Poor\" \"Improved\" \"Excellent\" \"Poor\"\n\n# 查看前6行和最后6行\nhead(patientdata)\n##   patientID age diabetes    status\n## 1         1  25    Type1      Poor\n## 2         2  34    Type2  Improved\n## 3         3  28    Type1 Excellent\n## 4         4  52    Type1      Poor\ntail(patientdata)\n##   patientID age diabetes    status\n## 1         1  25    Type1      Poor\n## 2         2  34    Type2  Improved\n## 3         3  28    Type1 Excellent\n## 4         4  52    Type1      Poor\n\n# 默认是6行，可以更改，比如改成2行\nhead(patientdata, 2)\n##   patientID age diabetes   status\n## 1         1  25    Type1     Poor\n## 2         2  34    Type2 Improved\n\n# 查看数据框的列名\nnames(patientdata)\n## [1] \"patientID\" \"age\"       \"diabetes\"  \"status\"\n\n# 或者使用以下方法查看列名\ncolnames(patientdata)\n## [1] \"patientID\" \"age\"       \"diabetes\"  \"status\"\n\n# 查看行名\nrownames(patientdata)  \n## [1] \"1\" \"2\" \"3\" \"4\"\n\n# 总结数据信息\nsummary(patientdata)\n##    patientID         age          diabetes            status         \n##  Min.   :1.00   Min.   :25.00   Length:4           Length:4          \n##  1st Qu.:1.75   1st Qu.:27.25   Class :character   Class :character  \n##  Median :2.50   Median :31.00   Mode  :character   Mode  :character  \n##  Mean   :2.50   Mean   :34.75                                        \n##  3rd Qu.:3.25   3rd Qu.:38.50                                        \n##  Max.   :4.00   Max.   :52.00\n\n如果我们要选择其中的某些行或者某些列，或者某个元素（比如，第2行第3列的值），有多种不同的方法实现。\n可以通过方括号实现，就像访问向量的元素一样。\n数据框和向量不一样，向量是一维的，数据框既有行也有列，数据框是二维的，所以在使用方括号时，我们也要指定行和列，行和列之间用,隔开，,前面表示行，后面表示列。\n以下是常见方法，必须要记住：\n\npatientdata[1, 2] # 取第1行第2列的值 \n## [1] 25\n\npatientdata[1:2,] # 取第1行到第2行，以及所有列，省略数字就是取所有\n##   patientID age diabetes   status\n## 1         1  25    Type1     Poor\n## 2         2  34    Type2 Improved\n\npatientdata[, 1:3] # 取所有行，以及第1列到第3列\n##   patientID age diabetes\n## 1         1  25    Type1\n## 2         2  34    Type2\n## 3         3  28    Type1\n## 4         4  52    Type1\n\npatientdata[c(1,4), c(1,3)] # 取第1行和第4行，以及第1列和第3列\n##   patientID diabetes\n## 1         1    Type1\n## 4         4    Type1\n\n如果你在方括号中不写,，那么默认是选取其中的列和所有行：\n\npatientdata[c(1,3)] # 取第1列和第3列，所有的行\n##   patientID diabetes\n## 1         1    Type1\n## 2         2    Type2\n## 3         3    Type1\n## 4         4    Type1\n\n除了使用数字序号这种，也可以直接使用列名进行选取（是不是和向量操作非常像？）：\n\npatientdata[, \"patientID\"] # 取patientID这一列和所有的行 ,可省略，下面的也是\n## [1] 1 2 3 4\npatientdata[, c(\"patientID\", \"diabetes\")] # 取patientID和diabetes两列及所有行\n##   patientID diabetes\n## 1         1    Type1\n## 2         2    Type2\n## 3         3    Type1\n## 4         4    Type1\n\n除了使用方括号，还可以使用美元符号$选取列：\n\n# 选取patientID这一列\npatientdata$patientID\n## [1] 1 2 3 4\n\n如果要同时选择部分行和列，还有一个专门的函数subset()：\n\nsubset(patientdata, # 数据\n       age &gt; 30, # 选择行，age&gt;30的行\n       select = c(\"patientID\",\"diabetes\",\"age\") # 选择列\n       )\n##   patientID diabetes age\n## 2         2    Type2  34\n## 4         4    Type1  52\n\n如果你想生成diabetes和status的列联表，可以使用table()函数：\n\ntable(patientdata$diabetes, patientdata$status)\n##        \n##         Excellent Improved Poor\n##   Type1         1        0    2\n##   Type2         0        1    0\n\n医学生应该都能看懂这个结果什么意思吧？\n在每个变量名前都键入一次patientdata$的写法是不符合编程思想的，是很繁琐的，所以给大家介绍一个with()函数，在with()函数内部，你可以不用写数据集的名字：\n\nwith(patientdata,\n     table(diabetes, status)\n     )\n##         status\n## diabetes Excellent Improved Poor\n##    Type1         1        0    2\n##    Type2         0        1    0\n\npatientdata这个数据集有4列，每一列都有一个列名，我们可以通过列名很轻松的选取其中的列，但是这个数据集没有行名，我们可以给它添加行名，这个数据共有4行，所以我们要准备4个名字，然后使用rownames()添加行名：\n\n# 准备4个名字\nrws &lt;- c(\"第一行\", \"第二行\", \"第三行\", \"第四行\")\n\n# 添加行名：\nrownames(patientdata) &lt;- rws\npatientdata\n##        patientID age diabetes    status\n## 第一行         1  25    Type1      Poor\n## 第二行         2  34    Type2  Improved\n## 第三行         3  28    Type1 Excellent\n## 第四行         4  52    Type1      Poor\n\n这样就可以通过行名选择你想要的行了，比如选择第1行和第3行，所有的列：\n\npatientdata[c(\"第一行\", \"第三行\"), ]\n##        patientID age diabetes    status\n## 第一行         1  25    Type1      Poor\n## 第三行         3  28    Type1 Excellent\n\n选择年龄大于30岁的行以及第2列和第3列：\n\npatientdata[patientdata$age &gt; 30, c(2,3)]\n##        age diabetes\n## 第二行  34    Type2\n## 第四行  52    Type1\n\n此时其实是通过TRUE/FALSE进行选择，首先看patientdata$age &gt; 30：\n\n# 第2个和第4个是TRUE，所以就是选择第2行和第4行\npatientdata$age &gt; 30\n## [1] FALSE  TRUE FALSE  TRUE\n\n这种方法非常有用，大家一定要记住。\n增加行列，删除行列：\n\n# 增加1列weight\npatientdata$weight &lt;- c(20,30,40,50)\npatientdata\n##        patientID age diabetes    status weight\n## 第一行         1  25    Type1      Poor     20\n## 第二行         2  34    Type2  Improved     30\n## 第三行         3  28    Type1 Excellent     40\n## 第四行         4  52    Type1      Poor     50\n\n# 删除第2列\npatientdata[,-2]\n##        patientID diabetes    status weight\n## 第一行         1    Type1      Poor     20\n## 第二行         2    Type2  Improved     30\n## 第三行         3    Type1 Excellent     40\n## 第四行         4    Type1      Poor     50\n\n# 或者使用以下方法删除列\npatientdata$weight &lt;- NULL\npatientdata\n##        patientID age diabetes    status\n## 第一行         1  25    Type1      Poor\n## 第二行         2  34    Type2  Improved\n## 第三行         3  28    Type1 Excellent\n## 第四行         4  52    Type1      Poor\n\n#patientdata[,- \"age\"] # 这种写法是错误的\n\n\n\n7.2.2 数据框实战\n这个数据是我从TCGA官网下载的乳腺癌患者的临床信息，包含：患者ID、样本ID、样本类型（normal还是tumor？）、年龄、性别等。\n\n# 读取文件\nlibrary(readxl)\nbrca_clin &lt;- read_xlsx(\"F:/R_books/R_beginners/brca_clin.xlsx\", col_names = T)\n\n# 查看数据基本情况\ndim(brca_clin)\n## [1] 20  9\nhead(brca_clin)\n## # A tibble: 6 × 9\n##   barcode        patient sample sample_type initial_weight ajcc_pathologic_stage\n##   &lt;chr&gt;          &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;                \n## 1 TCGA-BH-A1FC-… TCGA-B… TCGA-… Solid Tiss…            260 Stage IIA            \n## 2 TCGA-AC-A2FM-… TCGA-A… TCGA-… Solid Tiss…            220 Stage IIB            \n## 3 TCGA-BH-A0DO-… TCGA-B… TCGA-… Solid Tiss…            130 Stage I              \n## 4 TCGA-E2-A1BC-… TCGA-E… TCGA-… Solid Tiss…            260 Stage IA             \n## 5 TCGA-BH-A0BJ-… TCGA-B… TCGA-… Solid Tiss…            200 Stage IIB            \n## 6 TCGA-E2-A1LH-… TCGA-E… TCGA-… Solid Tiss…             60 Stage I              \n## # ℹ 3 more variables: days_to_last_follow_up &lt;chr&gt;, gender &lt;chr&gt;,\n## #   age_at_index &lt;dbl&gt;\ncolnames(brca_clin)\n## [1] \"barcode\"                \"patient\"                \"sample\"                \n## [4] \"sample_type\"            \"initial_weight\"         \"ajcc_pathologic_stage\" \n## [7] \"days_to_last_follow_up\" \"gender\"                 \"age_at_index\"\n\n变量名修改：\n\ncolnames(brca_clin)[c(5,6,7,9)] &lt;- c(\"weight\",\"stage\",\"days\",\"age\")\ncolnames(brca_clin)\n## [1] \"barcode\"     \"patient\"     \"sample\"      \"sample_type\" \"weight\"     \n## [6] \"stage\"       \"days\"        \"gender\"      \"age\"\n\n选择第5~9列：\n\nbrca_clin &lt;- brca_clin[,c(5:9)]\nbrca_clin\n## # A tibble: 20 × 5\n##    weight stage      days  gender   age\n##     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n##  1    260 Stage IIA  NA    female    78\n##  2    220 Stage IIB  NA    female    87\n##  3    130 Stage I    1644  female    78\n##  4    260 Stage IA   501   female    63\n##  5    200 Stage IIB  660   female    41\n##  6     60 Stage I    3247  female    59\n##  7    320 Stage IIB  NA    female    60\n##  8    310 Stage IIIA NA    female    39\n##  9    100 Stage IIB  1876  female    54\n## 10    250 Stage IIB  707   female    51\n## 11    130 Stage IIA  5749  female    51\n## 12    110 Stage IA   NA    female    44\n## 13    470 Stage IIA  1972  female    64\n## 14     90 Stage I    1321  female    56\n## 15    200 Stage IIA  385   female    71\n## 16     70 Stage IIA  1800  female    71\n## 17    130 Stage IIB  214   female    63\n## 18    770 Stage IIIA 1206  female    47\n## 19    200 Stage IA   2442  female    54\n## 20    250 Stage IIIC NA    female    36\n\n按照age从小到大排序数据框：\n\nbrca_clin[order(brca_clin$age),]\n## # A tibble: 20 × 5\n##    weight stage      days  gender   age\n##     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n##  1    250 Stage IIIC NA    female    36\n##  2    310 Stage IIIA NA    female    39\n##  3    200 Stage IIB  660   female    41\n##  4    110 Stage IA   NA    female    44\n##  5    770 Stage IIIA 1206  female    47\n##  6    250 Stage IIB  707   female    51\n##  7    130 Stage IIA  5749  female    51\n##  8    100 Stage IIB  1876  female    54\n##  9    200 Stage IA   2442  female    54\n## 10     90 Stage I    1321  female    56\n## 11     60 Stage I    3247  female    59\n## 12    320 Stage IIB  NA    female    60\n## 13    260 Stage IA   501   female    63\n## 14    130 Stage IIB  214   female    63\n## 15    470 Stage IIA  1972  female    64\n## 16    200 Stage IIA  385   female    71\n## 17     70 Stage IIA  1800  female    71\n## 18    260 Stage IIA  NA    female    78\n## 19    130 Stage I    1644  female    78\n## 20    220 Stage IIB  NA    female    87\n\n按照从大到小的顺序排列：\n\nbrca_clin[order(brca_clin$age, decreasing = T),]\n## # A tibble: 20 × 5\n##    weight stage      days  gender   age\n##     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n##  1    220 Stage IIB  NA    female    87\n##  2    260 Stage IIA  NA    female    78\n##  3    130 Stage I    1644  female    78\n##  4    200 Stage IIA  385   female    71\n##  5     70 Stage IIA  1800  female    71\n##  6    470 Stage IIA  1972  female    64\n##  7    260 Stage IA   501   female    63\n##  8    130 Stage IIB  214   female    63\n##  9    320 Stage IIB  NA    female    60\n## 10     60 Stage I    3247  female    59\n## 11     90 Stage I    1321  female    56\n## 12    100 Stage IIB  1876  female    54\n## 13    200 Stage IA   2442  female    54\n## 14    250 Stage IIB  707   female    51\n## 15    130 Stage IIA  5749  female    51\n## 16    770 Stage IIIA 1206  female    47\n## 17    110 Stage IA   NA    female    44\n## 18    200 Stage IIB  660   female    41\n## 19    310 Stage IIIA NA    female    39\n## 20    250 Stage IIIC NA    female    36\n\n变量修改，重编码，转换\n查看有几个类别，以及每个类别的数量：\n\ntable(brca_clin$stage)\n## \n##    Stage I   Stage IA  Stage IIA  Stage IIB Stage IIIA Stage IIIC \n##          3          3          5          6          2          1\n\n变量重编码和修改：\n\nbrca_clin$stage[brca_clin$stage == \"Stage IIB\"] &lt;- \"Stage_2\"\nbrca_clin\n## # A tibble: 20 × 5\n##    weight stage      days  gender   age\n##     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n##  1    260 Stage IIA  NA    female    78\n##  2    220 Stage_2    NA    female    87\n##  3    130 Stage I    1644  female    78\n##  4    260 Stage IA   501   female    63\n##  5    200 Stage_2    660   female    41\n##  6     60 Stage I    3247  female    59\n##  7    320 Stage_2    NA    female    60\n##  8    310 Stage IIIA NA    female    39\n##  9    100 Stage_2    1876  female    54\n## 10    250 Stage_2    707   female    51\n## 11    130 Stage IIA  5749  female    51\n## 12    110 Stage IA   NA    female    44\n## 13    470 Stage IIA  1972  female    64\n## 14     90 Stage I    1321  female    56\n## 15    200 Stage IIA  385   female    71\n## 16     70 Stage IIA  1800  female    71\n## 17    130 Stage_2    214   female    63\n## 18    770 Stage IIIA 1206  female    47\n## 19    200 Stage IA   2442  female    54\n## 20    250 Stage IIIC NA    female    36\n\n全部修改：\n\nbrca_clin$stage[brca_clin$stage == \"Stage IIA\"] &lt;- \"Stage_2\"\nbrca_clin$stage[brca_clin$stage == \"Stage IA\"] &lt;- \"Stage_1\"\nbrca_clin$stage[brca_clin$stage == \"Stage I\"] &lt;- \"Stage_1\"\nbrca_clin$stage[brca_clin$stage == \"Stage IIIA\"] &lt;- \"Stage_3\"\nbrca_clin$stage[brca_clin$stage == \"Stage IIIC\"] &lt;- \"Stage_3\"\n\nbrca_clin\n## # A tibble: 20 × 5\n##    weight stage   days  gender   age\n##     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n##  1    260 Stage_2 NA    female    78\n##  2    220 Stage_2 NA    female    87\n##  3    130 Stage_1 1644  female    78\n##  4    260 Stage_1 501   female    63\n##  5    200 Stage_2 660   female    41\n##  6     60 Stage_1 3247  female    59\n##  7    320 Stage_2 NA    female    60\n##  8    310 Stage_3 NA    female    39\n##  9    100 Stage_2 1876  female    54\n## 10    250 Stage_2 707   female    51\n## 11    130 Stage_2 5749  female    51\n## 12    110 Stage_1 NA    female    44\n## 13    470 Stage_2 1972  female    64\n## 14     90 Stage_1 1321  female    56\n## 15    200 Stage_2 385   female    71\n## 16     70 Stage_2 1800  female    71\n## 17    130 Stage_2 214   female    63\n## 18    770 Stage_3 1206  female    47\n## 19    200 Stage_1 2442  female    54\n## 20    250 Stage_3 NA    female    36\n\n查看修改后的stage:\n\ntable(brca_clin$stage)\n## \n## Stage_1 Stage_2 Stage_3 \n##       6      11       3\n\n根据年龄进行分组，大于60岁是old，小于等于60岁是young:\n\n# 先看下年龄是不是数值型\nstr(brca_clin)\n## tibble [20 × 5] (S3: tbl_df/tbl/data.frame)\n##  $ weight: num [1:20] 260 220 130 260 200 60 320 310 100 250 ...\n##  $ stage : chr [1:20] \"Stage_2\" \"Stage_2\" \"Stage_1\" \"Stage_1\" ...\n##  $ days  : chr [1:20] \"NA\" \"NA\" \"1644\" \"501\" ...\n##  $ gender: chr [1:20] \"female\" \"female\" \"female\" \"female\" ...\n##  $ age   : num [1:20] 78 87 78 63 41 59 60 39 54 51 ...\nis.numeric(brca_clin$age)\n## [1] TRUE\n\n开始修改：\n\nbrca_clin$age[brca_clin$age &gt; 60] &lt;- \"old\"\nbrca_clin$age[brca_clin$age &lt;= 60] &lt;- \"young\"\nbrca_clin\n## # A tibble: 20 × 5\n##    weight stage   days  gender age  \n##     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;\n##  1    260 Stage_2 NA    female old  \n##  2    220 Stage_2 NA    female old  \n##  3    130 Stage_1 1644  female old  \n##  4    260 Stage_1 501   female old  \n##  5    200 Stage_2 660   female young\n##  6     60 Stage_1 3247  female young\n##  7    320 Stage_2 NA    female young\n##  8    310 Stage_3 NA    female young\n##  9    100 Stage_2 1876  female young\n## 10    250 Stage_2 707   female young\n## 11    130 Stage_2 5749  female young\n## 12    110 Stage_1 NA    female young\n## 13    470 Stage_2 1972  female old  \n## 14     90 Stage_1 1321  female young\n## 15    200 Stage_2 385   female old  \n## 16     70 Stage_2 1800  female old  \n## 17    130 Stage_2 214   female old  \n## 18    770 Stage_3 1206  female young\n## 19    200 Stage_1 2442  female young\n## 20    250 Stage_3 NA    female young\n\nNA修改：\n\nbrca_clin$days_1 &lt;- ifelse(brca_clin$days == \"NA\", NA, brca_clin$days)\nbrca_clin\n## # A tibble: 20 × 6\n##    weight stage   days  gender age   days_1\n##     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; \n##  1    260 Stage_2 NA    female old   &lt;NA&gt;  \n##  2    220 Stage_2 NA    female old   &lt;NA&gt;  \n##  3    130 Stage_1 1644  female old   1644  \n##  4    260 Stage_1 501   female old   501   \n##  5    200 Stage_2 660   female young 660   \n##  6     60 Stage_1 3247  female young 3247  \n##  7    320 Stage_2 NA    female young &lt;NA&gt;  \n##  8    310 Stage_3 NA    female young &lt;NA&gt;  \n##  9    100 Stage_2 1876  female young 1876  \n## 10    250 Stage_2 707   female young 707   \n## 11    130 Stage_2 5749  female young 5749  \n## 12    110 Stage_1 NA    female young &lt;NA&gt;  \n## 13    470 Stage_2 1972  female old   1972  \n## 14     90 Stage_1 1321  female young 1321  \n## 15    200 Stage_2 385   female old   385   \n## 16     70 Stage_2 1800  female old   1800  \n## 17    130 Stage_2 214   female old   214   \n## 18    770 Stage_3 1206  female young 1206  \n## 19    200 Stage_1 2442  female young 2442  \n## 20    250 Stage_3 NA    female young &lt;NA&gt;",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据结构</span>"
    ]
  },
  {
    "objectID": "0601-数据结构.html#因子",
    "href": "0601-数据结构.html#因子",
    "title": "7  数据结构",
    "section": "7.3 因子",
    "text": "7.3 因子\n多数变量可归为名义型、有序型或连续型变量。\n名义型变量（nominal-variable）是没有顺序之分的类别变量。糖尿病类型diabetes（Type1、Type2）是名义型变量的一例。即使在数据中Type1编码为1而Type2编码为2`，这也并不意味着二者是有序的。\n有序型变量（ordinal-variable）表示一种顺序关系，而非数量关系。病情status（poor、improved、excellent）是有序型变量的一个示例。很明显病情为poor（较差）病人的状态不如improved（病情好转）的病人，但并不知道相差多少。\n连续型变量（continuous-variable）可以呈现为某个范围内的任意值，并同时表示了顺序和数量。年龄Age就是一个连续型变量，它能够表示像14.5或22.8这样的值以及其间的其他任意值。\n类别（名义型）变量和有序类别（有序型）变量在R中称为因子（factor）。因子在R中非常重要，因为它决定了数据的分析方式以及如何进行视觉呈现。\n因子可以通过函数factor()创建。比如用以下代码即可创建一个名为status的因子型向量：\n\nstatus &lt;- factor(c(\"Poor\", \"Improved\", \"Excellent\", \"Poor\"))\nstatus\n## [1] Poor      Improved  Excellent Poor     \n## Levels: Excellent Improved Poor\n\n此时的status是一个因子型向量，也是没有顺序之分的名义型变量，虽然给出了Levels，但是并不能表示它们之间有高低顺序，默认的水平顺序是按照首字母排列的。\n\n7.3.1 因子操作\n如果要更改不同水平的顺序，可以使用以下代码：\n\n# 指定顺序\nlevels(status) &lt;- c(\"Poor\", \"Excellent\", \"Improved\")\nstatus\n## [1] Improved  Excellent Poor      Improved \n## Levels: Poor Excellent Improved\n\n或者直接在factor()中指定：\n\nstatus &lt;- factor(c(\"Poor\", \"Improved\", \"Excellent\", \"Poor\"),\n                 levels = c(\"Poor\", \"Excellent\", \"Improved\")\n                 )\nstatus\n## [1] Poor      Improved  Excellent Poor     \n## Levels: Poor Excellent Improved\n\n对于不同的水平，你也可以修改它的显示标签：\n\nstatus &lt;- factor(c(\"Poor\", \"Improved\", \"Excellent\", \"Poor\"),\n                 levels = c(\"Poor\", \"Excellent\", \"Improved\"),\n                 labels = c(\"第一水平\", \"第二水平\", \"第三水平\")\n                 )\nstatus\n## [1] 第一水平 第三水平 第二水平 第一水平\n## Levels: 第一水平 第二水平 第三水平\n\n如果想要把某个变量变成有序型变量，可以使用ordered=TRUE参数：\n\nstatus &lt;- factor(c(\"Poor\", \"Improved\", \"Excellent\", \"Poor\"),\n                 ordered = T\n                 )\nstatus\n## [1] Poor      Improved  Excellent Poor     \n## Levels: Excellent &lt; Improved &lt; Poor\n\n可以看到此时结果中的Levels有了小于号，用来表示高低顺序。\n\n\n\n\n\n\n注释\n\n\n\n名义型变量和有序型变量在进行统计分析时会使用完全不同的方法，比如在进行线性回归或者cox回归分析时，名义型变量的默认方法是哑变量编码，而有序型变量的编码方式是正交多项式编码。相关内容可参考：分类变量进行回归分析时的编码方案\n\n\ntable()函数可用于查看每个水平的数量：\n\ntable(status)\n## status\n## Excellent  Improved      Poor \n##         1         1         2\n\n如果和length()同用则可以快速计算有几个水平（或类别，在分类变量中很常用）：\n\n# 查看有几个类别\nlength(table(status))\n## [1] 3\n\n因子类型是R语言中处理分类变量非常有用的类型，在画图的时候也可以使用因子规定好顺序，方便对图形进行排列。\nforcats包提供了一套专门用于处理因子的函数，非常实用，大家可以阅读以下文章进一步了解：\n\nR语言处理因子之forcats包介绍（1）\nR语言处理因子之forcats包介绍（2）\nR语言处理因子之forcats包介绍（3）\nR语言处理因子之forcats包介绍（4）",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据结构</span>"
    ]
  },
  {
    "objectID": "0601-数据结构.html#矩阵",
    "href": "0601-数据结构.html#矩阵",
    "title": "7  数据结构",
    "section": "7.4 矩阵",
    "text": "7.4 矩阵\n矩阵，matrix，表面看起来像一个数据框，有行和列，也是二维的，但是矩阵里面的所有元素都必须是同一类型的，比如必须都是数值型，或者必须都是字符型，或者必须都是逻辑型，等。\n可通过函数matrix()创建矩阵。一般使用格式为：\n\nmyymatrix &lt;- matrix(vector, nrow = 多少行？, ncol = 多少列？,\n                    byrow = 是不是按行进行填充？,\n                    dimnames = list(行名, 列名))\n\n其中vector是矩阵所需要的元素，nrow和ncol用以指定行和列的数量，dimnames包含了以字符型向量表示的行名和列名（这个参数可以省略不写）。选项byrow则表明矩阵应当按行填充（byrow=TRUE）还是按列填充（byrow=FALSE），默认情况下按列填充。\n以下代码创建了一个5行、4列的矩阵，用1~20这20个数字进行填充，并且定义了行的名字和列的名字，并且是按列进行填充：\n\ny &lt;- matrix(1:20, nrow=5, ncol=4,\n            dimnames = list(c(\"行1\",\"行2\",\"行3\",\"行4\",\"行5\"),\n                            c(\"列1\",\"列2\",\"列3\",\"列4\"))\n            ) \ny\n##     列1 列2 列3 列4\n## 行1   1   6  11  16\n## 行2   2   7  12  17\n## 行3   3   8  13  18\n## 行4   4   9  14  19\n## 行5   5  10  15  20\n\n对矩阵取行和列的语法和数据框完全一样，使用方括号即可，这里就不重复了。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据结构</span>"
    ]
  },
  {
    "objectID": "0601-数据结构.html#数组",
    "href": "0601-数据结构.html#数组",
    "title": "7  数据结构",
    "section": "7.5 数组",
    "text": "7.5 数组\n数组，array，类似矩阵，但可以有更多的维度（行、列以外的方向），比如可以有3维甚至更多，这种结构可能是你无法想象的（超过3维的东西你能想象出来吗？），但是幸好这个结构我们用的不多。\n数组可通过array函数创建，形式如下：\n\nmyarray &lt;- array(vector, dimensions, dimnames)\n\n其中vector包含了数组中的数据，dimensions是一个数值型向量，给出了各个维度下标的最大值，而dimnames是可选的、各维度名称标签的列表。\n以下代码创建一个三维数组（234）：\n\ndim1 &lt;- c(\"A1\", \"A2\")\ndim2 &lt;- c(\"B1\", \"B2\", \"B3\")\ndim3 &lt;- c(\"C1\", \"C2\", \"C3\", \"C4\")\n\nz &lt;- array(1:24, c(2, 3, 4), dimnames=list(dim1, dim2, dim3))\nz\n## , , C1\n## \n##    B1 B2 B3\n## A1  1  3  5\n## A2  2  4  6\n## \n## , , C2\n## \n##    B1 B2 B3\n## A1  7  9 11\n## A2  8 10 12\n## \n## , , C3\n## \n##    B1 B2 B3\n## A1 13 15 17\n## A2 14 16 18\n## \n## , , C4\n## \n##    B1 B2 B3\n## A1 19 21 23\n## A2 20 22 24",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据结构</span>"
    ]
  },
  {
    "objectID": "0601-数据结构.html#列表",
    "href": "0601-数据结构.html#列表",
    "title": "7  数据结构",
    "section": "7.6 列表",
    "text": "7.6 列表\n列表，list，是除了数据框之外第二重要的数据结构，甚至可以说是最重要的数据结构，但同时也是最复杂的一种结构。\n列表是一个大型的存储结构，里面啥都能放。比如，可以包含不同类型的数据，也可以包含其他数据结构，如向量、矩阵或数据框等，列表中也可以包含列表。\n可以使用函数list()创建列表，使用语法为：\n\nmylist &lt;- list(object1, object2, ...)\n\n其中的对象可以是目前为止讲到的任何结构。你还可以为列表中的对象命名：\n\nmylist &lt;- list(name1=object1, name2=object2, ...)\n\n以下是一个创建列表的示例，我们先创建了5个不同类型的对象，然后把这些对象全部放到1个列表中：\n\ng &lt;- \"My First List\" # 字符串\nh &lt;- c(25, 26, 18, 39) # 数值型向量\nj &lt;- matrix(1:10, nrow=5) # 矩阵\nk &lt;- c(\"one\", \"two\", \"three\") # 字符型向量\nl &lt;- list(\"apple\",1,TRUE) # 列表\n\n# 放到1个列表中\nmylist &lt;- list(title=g, ages=h, j, k, l)\nmylist\n## $title\n## [1] \"My First List\"\n## \n## $ages\n## [1] 25 26 18 39\n## \n## [[3]]\n##      [,1] [,2]\n## [1,]    1    6\n## [2,]    2    7\n## [3,]    3    8\n## [4,]    4    9\n## [5,]    5   10\n## \n## [[4]]\n## [1] \"one\"   \"two\"   \"three\"\n## \n## [[5]]\n## [[5]][[1]]\n## [1] \"apple\"\n## \n## [[5]][[2]]\n## [1] 1\n## \n## [[5]][[3]]\n## [1] TRUE\n\n\n7.6.1 列表操作\n可以看出列表的成分非常复杂，上面的列表mylist的长度为5，因为有5个成分：\n\n# 查看长度\nlength(mylist)\n## [1] 5\n\n前两个成分是有名字的：title和ages，后三个成分没有名字，但是有序号，分别是[[3]]、[[4]]、[[5]]。\n如果你要提取列表中的成分（或者叫对列表取子集），可以直接使用序号或者名字：\n\nmylist[2] # 取第2个成分\n## $ages\n## [1] 25 26 18 39\nmylist[\"title\"] # 取第一个成分\n## $title\n## [1] \"My First List\"\n\n注意此时得到的对象仍然是list：\n\nclass(mylist[2])\n## [1] \"list\"\nclass(mylist[\"title\"])\n## [1] \"list\"\n\n列表中还有一个特殊的操作，也就是[[]]，两个中括号，这样可以直接提取到具体的内容：\n\n# 直接提取具体的内容\nmylist[[\"title\"]]\n## [1] \"My First List\"\n\n# 此时得到的是字符型向量\nclass(mylist[[\"title\"]])\n## [1] \"character\"\n\n或者可以使用$，也可以直接得到具体的内容，但是这种方法只能用于有名字的时候：\n\nmylist$title\n## [1] \"My First List\"\n\n如果要给列表中的成分添加/修改/删除名字，也是使用names()：\n\n# 给第3-5个元素添加名字\nnames(mylist)[3:5] &lt;- c(\"名字3\",\"名字4\",\"名字5\")\n\n# 或者：\nnames(mylist)[c(3:5)] &lt;- c(\"名字3\",\"名字4\",\"名字5\")\n\n# 查看结果\nnames(mylist)\n## [1] \"title\" \"ages\"  \"名字3\" \"名字4\" \"名字5\"\n\n\n#修改第一个成分的名字：\nnames(mylist)[1] &lt;- \"改个名字\"\nnames(mylist)\n## [1] \"改个名字\" \"ages\"     \"名字3\"    \"名字4\"    \"名字5\"\n\n删除名字：\n\n# 删除所有名字\nnames(mylist) &lt;- NULL\nnames(mylist) # 此时再查看名字已经没有了\n## NULL\n\n如果要向列表中添加新的成分：\n\nmylist[[\"新的元素\"]] &lt;- c(1,2,3)\nmylist\n## [[1]]\n## [1] \"My First List\"\n## \n## [[2]]\n## [1] 25 26 18 39\n## \n## [[3]]\n##      [,1] [,2]\n## [1,]    1    6\n## [2,]    2    7\n## [3,]    3    8\n## [4,]    4    9\n## [5,]    5   10\n## \n## [[4]]\n## [1] \"one\"   \"two\"   \"three\"\n## \n## [[5]]\n## [[5]][[1]]\n## [1] \"apple\"\n## \n## [[5]][[2]]\n## [1] 1\n## \n## [[5]][[3]]\n## [1] TRUE\n## \n## \n## $新的元素\n## [1] 1 2 3\n\n删除列表中的成分：\n\n# 删除第一个成分\nmylist &lt;- mylist[-1]\nmylist\n## [[1]]\n## [1] 25 26 18 39\n## \n## [[2]]\n##      [,1] [,2]\n## [1,]    1    6\n## [2,]    2    7\n## [3,]    3    8\n## [4,]    4    9\n## [5,]    5   10\n## \n## [[3]]\n## [1] \"one\"   \"two\"   \"three\"\n## \n## [[4]]\n## [[4]][[1]]\n## [1] \"apple\"\n## \n## [[4]][[2]]\n## [1] 1\n## \n## [[4]][[3]]\n## [1] TRUE\n## \n## \n## $新的元素\n## [1] 1 2 3\n\n# 或者\nmylist$新的元素 &lt;- NULL\nmylist\n## [[1]]\n## [1] 25 26 18 39\n## \n## [[2]]\n##      [,1] [,2]\n## [1,]    1    6\n## [2,]    2    7\n## [3,]    3    8\n## [4,]    4    9\n## [5,]    5   10\n## \n## [[3]]\n## [1] \"one\"   \"two\"   \"three\"\n## \n## [[4]]\n## [[4]][[1]]\n## [1] \"apple\"\n## \n## [[4]][[2]]\n## [1] 1\n## \n## [[4]][[3]]\n## [1] TRUE\n\n把列表展开成向量：\n\nunlist(mylist)\n##                                                                                 \n##    \"25\"    \"26\"    \"18\"    \"39\"     \"1\"     \"2\"     \"3\"     \"4\"     \"5\"     \"6\" \n##                                                                                 \n##     \"7\"     \"8\"     \"9\"    \"10\"   \"one\"   \"two\" \"three\" \"apple\"     \"1\"  \"TRUE\"\nclass(unlist(mylist))\n## [1] \"character\"\nstr(unlist(mylist)) # 命名字符型向量\n##  Named chr [1:20] \"25\" \"26\" \"18\" \"39\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" ...\n##  - attr(*, \"names\")= chr [1:20] \"\" \"\" \"\" \"\" ...\n\n掌握了这些基本的数据结构和常用操作后，就算是正式入门R语言了，后面的章节会继续一些常用的数据处理操作。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据结构</span>"
    ]
  },
  {
    "objectID": "0602-类型判断和转换.html",
    "href": "0602-类型判断和转换.html",
    "title": "8  类型判断和转换",
    "section": "",
    "text": "8.1 类型判断\n每种类型都有一个判断类型的函数，以下是常见的几个：\n创建几个变量用于演示：\n# 把一个数字存储到变量my_integer中\nmy_integer &lt;- 5\n\ninteger_variable &lt;- 186L\n\n# 把一段文字存储到变量中\nmy_string &lt;- \"Hello, R!\"\n可以直接用class()或者typeof()：\n# 查看变量的类型\nclass(my_integer)\n## [1] \"numeric\"\nclass(integer_variable)\n## [1] \"integer\"\nclass(my_string)\n## [1] \"character\"\n还可以使用is.xxx()判断是不是属于某种类型，比如查看my_integer的类型：\nis.numeric(my_integer) # 是数值型吗？是的，返回TRUE\n## [1] TRUE\nis.logical(my_integer)  # 是逻辑型吗？不是，返回FLASE\n## [1] FALSE\na &lt;- c(1,2,3)\nis.numeric(a)\n## [1] TRUE\nNA表示缺失值，注意不要加引号，加了引号就变成字符型了：\ndd &lt;- NA\nis.na(dd)\n## [1] TRUE\n\ndd &lt;- \"NA\"\nis.na(dd)\n## [1] FALSE\nis.character(dd)\n## [1] TRUE\n创建一个数据框用于演示：\npatientdata &lt;- data.frame(\n  patientID = c(1, 2, 3, 4), \n  age = c(25, 34, 28, 52), \n  diabetes = c(\"Type1\", \"Type2\", \"Type1\", \"Type1\"), \n  status = c(\"Poor\", \"Improved\", \"Excellent\", \"Poor\")\n  )\n\nis.data.frame(patientdata)\n## [1] TRUE\n创建一个矩阵用于演示：\ny &lt;- matrix(1:20, nrow=5, ncol=4,\n            dimnames = list(c(\"行1\",\"行2\",\"行3\",\"行4\",\"行5\"),\n                            c(\"列1\",\"列2\",\"列3\",\"列4\"))\n            ) \nis.matrix(y)\n## [1] TRUE\n创建一个列表用于演示：\ng &lt;- \"My First List\" # 字符串\nh &lt;- c(25, 26, 18, 39) # 数值型向量\nj &lt;- matrix(1:10, nrow=5) # 矩阵\nk &lt;- c(\"one\", \"two\", \"three\") # 字符型向量\nl &lt;- list(\"apple\",1,TRUE) # 列表\n\n# 放到1个列表中\nmylist &lt;- list(title=g, ages=h, j, k, l)\n\nis.list(mylist)\n## [1] TRUE\n#is.vector(mylist)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>类型判断和转换</span>"
    ]
  },
  {
    "objectID": "0602-类型判断和转换.html#类型判断",
    "href": "0602-类型判断和转换.html#类型判断",
    "title": "8  类型判断和转换",
    "section": "",
    "text": "is.numeric()   # 是不是数值型？\nis.character()\nis.double()\nis.integer()\nis.factor()\nis.complex()\nis.logical()\nis.na() \n\nis.data.frame() # 是不是data.frame\nis.array()\nis.matrix()\nis.list()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>类型判断和转换</span>"
    ]
  },
  {
    "objectID": "0602-类型判断和转换.html#类型转换",
    "href": "0602-类型判断和转换.html#类型转换",
    "title": "8  类型判断和转换",
    "section": "8.2 类型转换",
    "text": "8.2 类型转换\n不同的向量之间可以相互转换。常见的类型转换函数：\nas.numeric()   # 变成数值型\nas.character()\nas.double()\nas.integer()\nas.factor()\nas.complex()\nas.logical()\n\nas.data.frame() # 变成数据框\nas.array()\nas.matrix()\nas.list()\n数值型向量转换为字符型/因子型/逻辑型：\n\na &lt;- c(1,2,3)\n\nas.character(a) # 变成字符型\n## [1] \"1\" \"2\" \"3\"\nas.factor(a)    # 变成因子型\n## [1] 1 2 3\n## Levels: 1 2 3\nas.logical(a)   # 变成逻辑型，无意义\n## [1] TRUE TRUE TRUE\n\n字符型向量转换：\n\nd &lt;- c(\"你好\",\"我是\",\"阿越\")\nd\n## [1] \"你好\" \"我是\" \"阿越\"\n\nas.numeric(d) # 错误用法，字符怎么能直接变数字呢？\n## Warning: NAs introduced by coercion\n## [1] NA NA NA\nas.factor(d) # 但是可以变因子\n## [1] 你好 我是 阿越\n## Levels: 阿越 你好 我是\n\n因子转换：\n\nf &lt;- factor(c(\"你好\",\"我是\",\"阿越\"))\nf\n## [1] 你好 我是 阿越\n## Levels: 阿越 你好 我是\n\nas.numeric(f) # 直接变数字\n## [1] 2 3 1\nas.character(f)\n## [1] \"你好\" \"我是\" \"阿越\"\n\n矩阵转换：\n\nas.data.frame(y)\n##     列1 列2 列3 列4\n## 行1   1   6  11  16\n## 行2   2   7  12  17\n## 行3   3   8  13  18\n## 行4   4   9  14  19\n## 行5   5  10  15  20\n#as.list(y) # 太长不演示\nas.numeric(y)\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\nas.factor(y)\n##  [1] 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20\n## Levels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\nas.character(y)\n##  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\"\n## [16] \"16\" \"17\" \"18\" \"19\" \"20\"\n\n数据框转换：\n\nas.matrix(patientdata)\n##      patientID age  diabetes status     \n## [1,] \"1\"       \"25\" \"Type1\"  \"Poor\"     \n## [2,] \"2\"       \"34\" \"Type2\"  \"Improved\" \n## [3,] \"3\"       \"28\" \"Type1\"  \"Excellent\"\n## [4,] \"4\"       \"52\" \"Type1\"  \"Poor\"\nas.list(patientdata)\n## $patientID\n## [1] 1 2 3 4\n## \n## $age\n## [1] 25 34 28 52\n## \n## $diabetes\n## [1] \"Type1\" \"Type2\" \"Type1\" \"Type1\"\n## \n## $status\n## [1] \"Poor\"      \"Improved\"  \"Excellent\" \"Poor\"\nas.character(patientdata)\n## [1] \"c(1, 2, 3, 4)\"                                     \n## [2] \"c(25, 34, 28, 52)\"                                 \n## [3] \"c(\\\"Type1\\\", \\\"Type2\\\", \\\"Type1\\\", \\\"Type1\\\")\"     \n## [4] \"c(\\\"Poor\\\", \\\"Improved\\\", \\\"Excellent\\\", \\\"Poor\\\")\"\n# as.numeric(patientdata) # 错误\n# as.factor(patientdata) # 错误\n\n列表转换：\n\n# as.data.frame(mylist) # 报错\nas.matrix(mylist)\n##       [,1]           \n## title \"My First List\"\n## ages  numeric,4      \n##       integer,10     \n##       character,3    \n##       list,3",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>类型判断和转换</span>"
    ]
  },
  {
    "objectID": "0603-数值和字符串处理.html",
    "href": "0603-数值和字符串处理.html",
    "title": "9  数值和字符串处理",
    "section": "",
    "text": "9.1 数值处理",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数值和字符串处理</span>"
    ]
  },
  {
    "objectID": "0603-数值和字符串处理.html#数值处理",
    "href": "0603-数值和字符串处理.html#数值处理",
    "title": "9  数值和字符串处理",
    "section": "",
    "text": "9.1.1 计算函数\n常见的计算函数：\n\nx &lt;- c(1,2,3,4,5)\n\nsum(x) # 求和\n## [1] 15\nmean(x) # 平均数\n## [1] 3\nmedian(x)      # 中位数\n## [1] 3\nsd(x) # 标准差\n## [1] 1.581139\nvar(x) # 方差\n## [1] 2.5\nmad(x) # 绝对中位差 median absolute deviation\n## [1] 1.4826\nquantile(x,probs = c(0.05,0.95)) # 分位数\n##  5% 95% \n## 1.2 4.8\nrange(x) # 范围\n## [1] 1 5\nmin(x) # 最小值\n## [1] 1\nmax(x) # 最大值\n## [1] 5\nscale(x) # 中心化，标准化\n##            [,1]\n## [1,] -1.2649111\n## [2,] -0.6324555\n## [3,]  0.0000000\n## [4,]  0.6324555\n## [5,]  1.2649111\n## attr(,\"scaled:center\")\n## [1] 3\n## attr(,\"scaled:scale\")\n## [1] 1.581139\n\n\n\n9.1.2 概率函数\n由两部分组成：\n\nd：密度函数（density）\np：分布函数（distribution）\nq：分位数函数（quantile）\nr：随机函数（random）\n\n\n随机正态分布：\n\nrnorm(20, mean = 0, sd = 1)\n##  [1]  0.007481045 -0.082559333 -0.724685467 -1.178576420 -1.936955879\n##  [6]  0.170857125  1.342751981 -2.190949311  0.408920577  0.143333772\n## [11] -0.333834724 -0.197167202  0.047380533 -0.379240710  0.132042085\n## [16]  1.210807449 -1.229039840 -0.660543058 -1.783790655 -0.204882530\n\n密度正态分布：\n\ndnorm(20, mean = 0, sd = 1)\n## [1] 5.520948e-88\n\n随机均匀分布：\n\nrunif(20, min = 10, max = 80)\n##  [1] 46.91163 47.52847 75.16648 35.41151 30.58809 78.45340 31.53170 58.44719\n##  [9] 63.29884 22.29294 12.79481 26.24488 66.27774 13.77782 57.12090 25.91834\n## [17] 60.18362 74.36051 34.02500 50.66548\n\n随机过程无法复现，但是可以通过设置随机种子数复现（所以计算机里面的随机是伪随机）：\n\n# 设置随机种子数，你的结果就能和我一样了\nset.seed(123)\nrnorm(20, mean = 0, sd = 1)\n##  [1] -0.56047565 -0.23017749  1.55870831  0.07050839  0.12928774  1.71506499\n##  [7]  0.46091621 -1.26506123 -0.68685285 -0.44566197  1.22408180  0.35981383\n## [13]  0.40077145  0.11068272 -0.55584113  1.78691314  0.49785048 -1.96661716\n## [19]  0.70135590 -0.47279141",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数值和字符串处理</span>"
    ]
  },
  {
    "objectID": "0603-数值和字符串处理.html#字符串处理",
    "href": "0603-数值和字符串处理.html#字符串处理",
    "title": "9  数值和字符串处理",
    "section": "9.2 字符串处理",
    "text": "9.2 字符串处理\n常用的字符处理函数：\n\n以第5章导入的TCGA乳腺癌数据为例。先读取数据：\n\ndf &lt;- read.csv(\"datasets/brca_clin.csv\", header = T)\n\n# 检查下数据的基本结构\ndim(df)\n## [1] 20  9\nstr(df)\n## 'data.frame':    20 obs. of  9 variables:\n##  $ barcode               : chr  \"TCGA-BH-A1FC-11A-32R-A13Q-07\" \"TCGA-AC-A2FM-11B-32R-A19W-07\" \"TCGA-BH-A0DO-11A-22R-A12D-07\" \"TCGA-E2-A1BC-11A-32R-A12P-07\" ...\n##  $ patient               : chr  \"TCGA-BH-A1FC\" \"TCGA-AC-A2FM\" \"TCGA-BH-A0DO\" \"TCGA-E2-A1BC\" ...\n##  $ sample                : chr  \"TCGA-BH-A1FC-11A\" \"TCGA-AC-A2FM-11B\" \"TCGA-BH-A0DO-11A\" \"TCGA-E2-A1BC-11A\" ...\n##  $ sample_type           : chr  \"Solid Tissue Normal\" \"Solid Tissue Normal\" \"Solid Tissue Normal\" \"Solid Tissue Normal\" ...\n##  $ initial_weight        : int  260 220 130 260 200 60 320 310 100 250 ...\n##  $ ajcc_pathologic_stage : chr  \"Stage IIA\" \"Stage IIB\" \"Stage I\" \"Stage IA\" ...\n##  $ days_to_last_follow_up: int  NA NA 1644 501 660 3247 NA NA 1876 707 ...\n##  $ gender                : chr  \"female\" \"female\" \"female\" \"female\" ...\n##  $ age_at_index          : int  78 87 78 63 41 59 60 39 54 51 ...\nhead(df)\n##                        barcode      patient           sample\n## 1 TCGA-BH-A1FC-11A-32R-A13Q-07 TCGA-BH-A1FC TCGA-BH-A1FC-11A\n## 2 TCGA-AC-A2FM-11B-32R-A19W-07 TCGA-AC-A2FM TCGA-AC-A2FM-11B\n## 3 TCGA-BH-A0DO-11A-22R-A12D-07 TCGA-BH-A0DO TCGA-BH-A0DO-11A\n## 4 TCGA-E2-A1BC-11A-32R-A12P-07 TCGA-E2-A1BC TCGA-E2-A1BC-11A\n## 5 TCGA-BH-A0BJ-11A-23R-A089-07 TCGA-BH-A0BJ TCGA-BH-A0BJ-11A\n## 6 TCGA-E2-A1LH-11A-22R-A14D-07 TCGA-E2-A1LH TCGA-E2-A1LH-11A\n##           sample_type initial_weight ajcc_pathologic_stage\n## 1 Solid Tissue Normal            260             Stage IIA\n## 2 Solid Tissue Normal            220             Stage IIB\n## 3 Solid Tissue Normal            130               Stage I\n## 4 Solid Tissue Normal            260              Stage IA\n## 5 Solid Tissue Normal            200             Stage IIB\n## 6 Solid Tissue Normal             60               Stage I\n##   days_to_last_follow_up gender age_at_index\n## 1                     NA female           78\n## 2                     NA female           87\n## 3                   1644 female           78\n## 4                    501 female           63\n## 5                    660 female           41\n## 6                   3247 female           59\n\n计算字符数量：\n\nx &lt;- df$barcode[1:3]\nx\n## [1] \"TCGA-BH-A1FC-11A-32R-A13Q-07\" \"TCGA-AC-A2FM-11B-32R-A19W-07\"\n## [3] \"TCGA-BH-A0DO-11A-22R-A12D-07\"\n\nnchar(x)\n## [1] 28 28 28\n\n截取字符串、替换字符串：\n\nx &lt;- df$barcode[1]\nx\n## [1] \"TCGA-BH-A1FC-11A-32R-A13Q-07\"\n\nsubstr(x, start = 1, stop = 15)\n## [1] \"TCGA-BH-A1FC-11\"\nsubstr(x, start = 1, stop = 3) &lt;- \"ggg\"\nx\n## [1] \"gggA-BH-A1FC-11A-32R-A13Q-07\"\n\n查找字符串：\n\nx &lt;- c(df$barcode[1:3], \"hahahaha\")\nx\n## [1] \"TCGA-BH-A1FC-11A-32R-A13Q-07\" \"TCGA-AC-A2FM-11B-32R-A19W-07\"\n## [3] \"TCGA-BH-A0DO-11A-22R-A12D-07\" \"hahahaha\"\n\ngrep(\"TCGA\", x)\n## [1] 1 2 3\n\ngrepl(\"TCGA\", x)\n## [1]  TRUE  TRUE  TRUE FALSE\n\n搜索替换：\n\nx &lt;- df$barcode[1:5]\nx\n## [1] \"TCGA-BH-A1FC-11A-32R-A13Q-07\" \"TCGA-AC-A2FM-11B-32R-A19W-07\"\n## [3] \"TCGA-BH-A0DO-11A-22R-A12D-07\" \"TCGA-E2-A1BC-11A-32R-A12P-07\"\n## [5] \"TCGA-BH-A0BJ-11A-23R-A089-07\"\n\nsub(\"-\",\"_\",x)\n## [1] \"TCGA_BH-A1FC-11A-32R-A13Q-07\" \"TCGA_AC-A2FM-11B-32R-A19W-07\"\n## [3] \"TCGA_BH-A0DO-11A-22R-A12D-07\" \"TCGA_E2-A1BC-11A-32R-A12P-07\"\n## [5] \"TCGA_BH-A0BJ-11A-23R-A089-07\"\ngsub(\"-\",\"_\",x)\n## [1] \"TCGA_BH_A1FC_11A_32R_A13Q_07\" \"TCGA_AC_A2FM_11B_32R_A19W_07\"\n## [3] \"TCGA_BH_A0DO_11A_22R_A12D_07\" \"TCGA_E2_A1BC_11A_32R_A12P_07\"\n## [5] \"TCGA_BH_A0BJ_11A_23R_A089_07\"\n\n分割字符串：\n\nx &lt;- df$barcode[1]\nx\n## [1] \"TCGA-BH-A1FC-11A-32R-A13Q-07\"\n\nstrsplit(x, split = \"-\")\n## [[1]]\n## [1] \"TCGA\" \"BH\"   \"A1FC\" \"11A\"  \"32R\"  \"A13Q\" \"07\"\n\n连接字符串：\n\nx &lt;- c()\npaste(\"haha\",1:3,sep = \"\")\n## [1] \"haha1\" \"haha2\" \"haha3\"\npaste(\"haha\",1:3,sep = \" \")\n## [1] \"haha 1\" \"haha 2\" \"haha 3\"\npaste(\"haha\",1:3,sep = \"OOO\")\n## [1] \"hahaOOO1\" \"hahaOOO2\" \"hahaOOO3\"\npaste(\"今天是\",date())\n## [1] \"今天是 Fri Aug  2 21:59:05 2024\"\n\npaste0(\"haha\",1:3)\n## [1] \"haha1\" \"haha2\" \"haha3\"\n\n大小写转换：\n\nx &lt;- c(\"asdf\",\"asdf\",\"ghb\")\ntoupper(x)\n## [1] \"ASDF\" \"ASDF\" \"GHB\"\n\nx &lt;- c(\"SADFf\",\"FAFFaa\")\ntolower(x)\n## [1] \"sadff\"  \"faffaa\"\n\n\n\n\n\n\n\n注释\n\n\n\n更高级的字符处理技术请学习R包stringr和正则表达式，非常强大！",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数值和字符串处理</span>"
    ]
  },
  {
    "objectID": "07-控制结构和自编函数.html",
    "href": "07-控制结构和自编函数.html",
    "title": "10  控制结构和自编函数",
    "section": "",
    "text": "10.1 循环结构\n在处理实际问题时，我们经常会遇到以下问题，比如：重复执行某个操作，这时候就要用到一些常见的控制语句，比如：for循环、while循环等。",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>控制结构和自编函数</span>"
    ]
  },
  {
    "objectID": "07-控制结构和自编函数.html#循环结构",
    "href": "07-控制结构和自编函数.html#循环结构",
    "title": "10  控制结构和自编函数",
    "section": "",
    "text": "10.1.1 for循环\n重复执行某个操作，直到变量的值不再包含在序列seq中为止。基本语法：\nfor (var in seq) { statment }\n举个简单的例子，如果i在1-5里面，就打印你好：\n\n# i会从1开始一直取到5\nfor(i in 1:5) { \n  print(\"你好\")\n}\n## [1] \"你好\"\n## [1] \"你好\"\n## [1] \"你好\"\n## [1] \"你好\"\n## [1] \"你好\"\n\n在实际使用时，最好先准备一个容器，用来存放for循环的输出，这样可以加快运行速度。\n假如我们有一个数据框如下：\n\nset.seed(123)\ndf &lt;- data.frame(a = rnorm(10),\n                 b = rnorm(10),\n                 c = rnorm(10),\n                 d = rnorm(10)\n                 )\ndf\n##              a          b          c           d\n## 1  -0.56047565  1.2240818 -1.0678237  0.42646422\n## 2  -0.23017749  0.3598138 -0.2179749 -0.29507148\n## 3   1.55870831  0.4007715 -1.0260044  0.89512566\n## 4   0.07050839  0.1106827 -0.7288912  0.87813349\n## 5   0.12928774 -0.5558411 -0.6250393  0.82158108\n## 6   1.71506499  1.7869131 -1.6866933  0.68864025\n## 7   0.46091621  0.4978505  0.8377870  0.55391765\n## 8  -1.26506123 -1.9666172  0.1533731 -0.06191171\n## 9  -0.68685285  0.7013559 -1.1381369 -0.30596266\n## 10 -0.44566197 -0.4727914  1.2538149 -0.38047100\n\n现在我们要计算每列的中位数，我们可以使用for循环实现：\n\noutput &lt;- vector(\"double\", ncol(df)) # 准备容器\n\nfor(i in 1:ncol(df)){                # for循环\n  output[i] &lt;- median(df[,i])\n}\n\noutput\n## [1] -0.07983455  0.38029264 -0.67696525  0.49019094\n\n以上也是最常见的for循环的结构，主要包括3个部分：\n\n输出：output &lt;- vector(\"double\", ncol(df))。在开始循环之前就要给输出分配足够的空间，这样做可以提高运行速度；\n序列：i in 1:ncol(df)。\n循环体：output[i] &lt;- median(df[,i])。这部分是具体运行的操作，每次运行都会使用一个不同的i值，第1次是output[1] &lt;- median(df[,1])，第2次是output[2] &lt;- median(df[,2])，以此类推。\n\n\n\n10.1.2 while循环\nwhile循环也是重复执行某个操作，直到条件不再满足为止，适用于不知道循环几次的情况。\nwhile (cond) { statment }\nwhile循环比for循环简单，for循环总是可以改写成while循环，但是while循环不一定能改写成for循环：\nfor( i in seq_along(x)){\n  statment\n}\n\n# 等价于\ni = 1\nwhile(i &lt;= length(x)){\n  statment\n  i = i +1\n}\nwhile循环不如for循环常见，大家感兴趣可以自己学习。",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>控制结构和自编函数</span>"
    ]
  },
  {
    "objectID": "07-控制结构和自编函数.html#分支结构",
    "href": "07-控制结构和自编函数.html#分支结构",
    "title": "10  控制结构和自编函数",
    "section": "10.2 分支结构",
    "text": "10.2 分支结构\n如果符合条件（必须返回逻辑值，即TRUE或者FALSE），就执行某个操作。是大家中学数学中都学过的if-else结构。if-else经常和for循环连用。\n\n10.2.1 if-else\n1个分支的情况比较少见，但是也有，基本语法如下：\nif(条件) {\n  操作\n}\n举个简单例子，如果x&gt;5，就打印“大于5”：\n\nx &lt;- 7\n\nif(x &gt; 5){print(\"大于5\")}\n## [1] \"大于5\"\n\n# 可以简写成\nif(x &gt; 5) print(\"大于5\")\n## [1] \"大于5\"\n\n两个分支是最常见的操作，如果符合条件，就执行某个操作，如果不符合，就执行另一个操作。基本语法为：\nif(条件){\n  操作1\n} else {\n  操作2\n}\n这种结构由于比较常见，也可以简写为：\n# 这种写法使用很频繁\nifelse(条件, 操作1, 操作2)\n使用第5章开头用的TCGA的乳腺癌数据为例。\nTCGA每个样本的barcode是有明确含义的，它的第14位和第15为数字如果小于10，说明这个样本是tumor，否则就是normal。\n我们可以根据此特点，创建一个新的变量用来表示样本类型（tumor还是normal）。\n\n# 读取数据\ndf &lt;- read.csv(\"datasets/brca_clin.csv\", header = T)\n\n# 展示下第一个样本的barcode\ndf$barcode[1]\n## [1] \"TCGA-BH-A1FC-11A-32R-A13Q-07\"\n\n# 新建一个变量，用来表示样本类型\ngroup &lt;- ifelse(as.numeric(substr(df$barcode,14,15))&lt;10,\"tumor\", \"normal\")\ngroup\n##  [1] \"normal\" \"normal\" \"normal\" \"normal\" \"normal\" \"normal\" \"normal\" \"normal\"\n##  [9] \"normal\" \"normal\" \"tumor\"  \"tumor\"  \"tumor\"  \"tumor\"  \"tumor\"  \"tumor\" \n## [17] \"tumor\"  \"tumor\"  \"tumor\"  \"tumor\"\n\n如果一个表达式函数太多，你看不懂，那你就从最里面一层开始看。比如上面的最后1行代码，我们从最里面的一层开始看：\n\ndf$barcode：取df的barcode这一列\nsubstr(df$barcode,14,15)：截取barcode的第14位和第15位\nas.numeric(substr(df$barcode,14,15)：把第14位和第15位转换为数值型，以便和10比较\nas.numeric(substr(df$barcode,14,15))&lt;10：判断是不是小于10，返回TRUE或者FALSE\nifelse(xxx, \"tumor\", \"normal\")：根据条件执行操作\n\n多个分支也是常见操作，基本语法如下：\nif(条件1) {\n  操作1\n} else if(条件2) {\n  操作2\n} else if(条件n) {\n  操作n\n} else {\n  操作x\n}\n中间可以有任意多个条件和操作。",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>控制结构和自编函数</span>"
    ]
  },
  {
    "objectID": "07-控制结构和自编函数.html#自编函数",
    "href": "07-控制结构和自编函数.html#自编函数",
    "title": "10  控制结构和自编函数",
    "section": "10.3 自编函数",
    "text": "10.3 自编函数\n有时可能并没有合适的、可直接使用的R包能满足我们个性化的需求，这时候就需要自己写函数实现。\n在使用代码实现自己的需求前，首先你自己得搞清楚解决这个问题的逻辑，也就是你脑海中要知道，为了解决这个问题，第一步需要做什么？第二步需要做什么？第三步需要做什么？然后再通过代码实现你的这几个步骤。\n一个函数的结构如下所示：\nmyfunction &lt;- function(参数1, 参数2, ... ){\n  操作\n  return(返回值)\n}\n假设你想编写一个函数，用来计算数据的集中趋势和离散趋势。此函数应当可以选择性地给出参数统计量（均值和标准差）和非参数统计量（中位数和绝对中位差）。结果应当以一个含名称列表的形式给出。另外，用户应当可以选择是否自动输出结果。除非另外指定，否则此函数的默认行为应当是计算参数统计量并且不输出结果。\n假如你想编写一个函数，用来计算一个数值型向量的集中趋势（均值和标准差）或者离散趋势（中位数和绝对中位差），默认是计算均值和标准差，但是也可以通过修改参数，让函数计算中位数和绝对中位差。\n为了写出这个函数，我们首先确定，这个函数需要哪些参数？它的最终返回结果是什么？\n对于这个问题来说，第一个参数就是一个数值型向量；除此之外，还需要第2个参数，用来控制到底是计算集中趋势还是计算离散趋势。\n函数的输出结果就是两个值，要么是均值和标准差，要么是中位数和绝对中位差。\n然后是确定具体的执行步骤，对于这个问题也就是计算均值和标准差（或者中位数和绝对中位差），如何实现呢？这个问题当然是通过if-else了，如果满足条件就计算集中趋势，不满足就计算离散趋势。\n确定好具体的步骤之后，我们就可以开始写这个函数了。\n\nmystats &lt;- function(v, center=TRUE){ # 2个参数，第2个参数默认值是TRUE\n  if(center == TRUE){          # 满足条件则...\n    均值 &lt;- mean(v)\n    标准差 &lt;- sd(v)\n    res &lt;- c(均值,标准差)\n  } else {                     # 不满足条件则...\n    中位数 &lt;- median(v)\n    绝对中位差 &lt;- mad(v)\n    res &lt;- c(中位数, 绝对中位差)\n  }\n  return(res) # 不写这句也可以\n}\n\n写好之后，要使用这个函数，你可以直接全选这个函数，然后Run一下，就可以在Environment面板中看到这个函数了：\n\n然后就可以使用了。\n随机创建一个数值型向量用于演示：\n\nset.seed(1234)\nx &lt;- rnorm(500)\n\n用编写的函数计算：\n\n# center=TRUE 可以不写，不写就是默认TRUE，计算集中趋势\ny &lt;- mystats(v = x)\ny\n## [1] 0.001838821 1.034813946\n\n# 或者计算离散趋势\ny &lt;- mystats(v = x, center = F)\ny\n## [1] -0.02070734  1.00098385\n\n除了选中运行外，还可以把这个函数保存为一个R脚本文件，要使用前先source一下即可。\n我们把上面的函数保存为mystats.R，然后source一下：\n\nsource(\"mystats.R\") # 注意路径\n\n看看Environment面板中是不是出现了这个函数？",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>控制结构和自编函数</span>"
    ]
  },
  {
    "objectID": "07-控制结构和自编函数.html#实战",
    "href": "07-控制结构和自编函数.html#实战",
    "title": "10  控制结构和自编函数",
    "section": "10.4 实战",
    "text": "10.4 实战\n再来一个实战。for循环和if-else连用。\n我们根据年龄将TCGA中的样本分为老年、中年、青年，如果年龄小于40岁，就是“青年”，如果大于等于40且小于60，就是“中年”，否则就是“老年”。\n先在脑海中想一下，怎么用计算机语言实现这一过程。\n因为有条件（如果xxx就xxx，如果不xxx就zzz），所以肯定要用到if-else；然后对于每一个年龄，都要判断是不是满足条件，所以要用到for循环。\n先定义一个容器，然后准备序列，然后根据条件判断。\n\n# 定义一个容器\nage_groups &lt;- vector(\"character\", length(df$age_at_index))\n\nfor (i in 1:length(df$age_at_index)) {  # 序列\n  if(df$age_at_index[i] &lt; 40) {         # 判断条件\n    age_groups[i] &lt;- \"青年\"\n  } else if (df$age_at_index[i] &gt;= 40 & df$age_at_index[i] &lt;= 60) {\n    age_groups[i] &lt;- \"中年\"\n  } else if (df$age_at_index[i] &gt; 60) {\n    age_groups[i] &lt;- \"老年\"\n  }\n}\n\nage_groups\n##  [1] \"老年\" \"老年\" \"老年\" \"老年\" \"中年\" \"中年\" \"中年\" \"青年\" \"中年\" \"中年\"\n## [11] \"中年\" \"中年\" \"老年\" \"中年\" \"老年\" \"老年\" \"老年\" \"中年\" \"中年\" \"青年\"\n\n是不是还算简单，并没有想象中的难。\n这个函数还有很多可以改进的地方，当你学习深入后可以尝试一下。",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>控制结构和自编函数</span>"
    ]
  },
  {
    "objectID": "9999-appendix.html",
    "href": "9999-appendix.html",
    "title": "附录 A — 其他合集",
    "section": "",
    "text": "A.1 医学统计",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>其他合集</span>"
    ]
  },
  {
    "objectID": "9999-appendix.html#医学统计",
    "href": "9999-appendix.html#医学统计",
    "title": "附录 A — 其他合集",
    "section": "",
    "text": "R语言实战医学统计合集：R语言实战医学统计\n在线版电子书：R语言实战医学统计\ngithub地址：R语言实战医学统计",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>其他合集</span>"
    ]
  },
  {
    "objectID": "9999-appendix.html#临床预测模型",
    "href": "9999-appendix.html#临床预测模型",
    "title": "附录 A — 其他合集",
    "section": "A.2 临床预测模型",
    "text": "A.2 临床预测模型\n临床预测模型合集：临床预测模型",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>其他合集</span>"
    ]
  },
  {
    "objectID": "9999-appendix.html#机器学习",
    "href": "9999-appendix.html#机器学习",
    "title": "附录 A — 其他合集",
    "section": "A.3 机器学习",
    "text": "A.3 机器学习\n医学和生信笔记后台回复caret即可获取caret包的合集教程；回复tidymodels即可获取tidymodels的合集教程；回复mlr3即可获取mlr3合集教程，回复机器学习即可获取机器学习推文合集。\nR语言机器学习合集：R语言机器学习",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>其他合集</span>"
    ]
  },
  {
    "objectID": "9999-appendix.html#生信数据挖掘",
    "href": "9999-appendix.html#生信数据挖掘",
    "title": "附录 A — 其他合集",
    "section": "A.4 生信数据挖掘",
    "text": "A.4 生信数据挖掘\n生信数据挖掘合集：生信数据挖掘\n医学和生信笔记公众号所有关于生信数据挖掘的推文都可以免费下载使用，请看：“灌水”生信类文章会用到哪些生信下游分析？（附下载地址）\ngithub地址：R语言生信数据挖掘",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>其他合集</span>"
    ]
  },
  {
    "objectID": "9999-appendix.html#扫码关注",
    "href": "9999-appendix.html#扫码关注",
    "title": "附录 A — 其他合集",
    "section": "A.5 扫码关注",
    "text": "A.5 扫码关注\n欢迎扫码关注：医学和生信笔记",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>其他合集</span>"
    ]
  },
  {
    "objectID": "05-导入导出文件.html#工作路径",
    "href": "05-导入导出文件.html#工作路径",
    "title": "5  导入导出文件",
    "section": "",
    "text": "注释\n\n\n\n注意，在R中写路径时需要使用斜杠/，而不是反斜杠\\，如果你要在路径中使用反斜杠，必须用两个\\\\，比如：F:/R_books/和F:\\\\R_books\\\\都是正确的，但是F:\\R_books\\是错误的。",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>导入导出文件</span>"
    ]
  },
  {
    "objectID": "04-什么是函数.html#函数",
    "href": "04-什么是函数.html#函数",
    "title": "4  什么是函数？",
    "section": "",
    "text": "install.packages(\"lrm\")\n将程序包安装入‘C:/Users/liyue/AppData/Local/R/win-library/4.3’\n(因为‘lib’没有被指定)\nWarning in install.packages :\n  package ‘lrm’ is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>什么是函数？</span>"
    ]
  }
]