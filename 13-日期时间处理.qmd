---
title: "日期时间处理"
---

R语言的日期和时间问题很复杂，各种转换和计算、解析等都有明确的要求，而且由于格式复杂，经常会遇到各种问题。

`lubridate`包是专门用来处理日期时间数据的，涉及转换、解析、计算等多种功能，目前`lubridate`包也已经是`tidyverse`系列的一员了。

要想完全搞明白R语言里面的日期时间实在不是简单的事情，除了搞懂R里面的格式和各种函数的用法外，还要充分了解各种地理知识！比如时区、自然年、ISO年、国际日期变更线、闰年、闰月、夏令时、冬令时、时间的加减等。

## 简介

- date-time

以秒为单位，类似于：2022-03-13 12:09:10 UTC

```{r}
library(lubridate)

dt <- as_datetime(2211870400) # 从1970-01-01 00:00:00开始算经过了多少秒
dt
```

- date

以天为单位，也是自1970年1月1日开始

```{r}
d <- as_date(18090)
d
```

- time

以秒为单位，没有日期，只有时分秒

```{r}
t <- hms::as_hms(85)
t
```

## 解析date-time

可用于把字符串（string）或者数值（number）转化为date-time类型。

- 识别数据中的年、月、日、时、分、秒
- 使用以下函数识别不同顺序的date-time，每个函数都可以接受`tz`参数用于设置时区


### 常用解析函数

y、m、d、h、m、s分别代表年、月、日、时、分、秒，字母的顺序就代表你的数据中日期时间的顺序。

`ymd_hms()`
`ymd_hm()`
`ymd_h()`

`ydm_hms()`
`ydm_hm()`
`ydm_h()`

`mdy_hms()`
`mdy_hm()`
`mdy_h()`

`dmy_hms()`
`dmy_hm()`
`dmy_h()`

`ymd()`
`ydm()`
`mdy()`
`myd()`
`dmy()`
`dym()`

`yq()`：q代表季节

`my()`
`ym()`

从以上函数相信你应该可以看出：

不能是单独的几月几日，例如`3-13`这种，是识别不了的！

对于解析日期来说，如果是字符型，默认的分隔符是`/`或者`-`，其他的分隔符都不能识别！

### 例子

下面是一些正确解析的例子，什么样的数据就要使用什么样的函数，错了就无法识别！

```{r}
# 常见格式
ymd_hms("2017-11-28T12:00:00")

ymd_hms("2022-02-12 13:21:45")

ymd_hm("2022-02-13 14:00")
ymd_h("2022/01/23 13")

mdy_hm("03/11/2021 12:23")

# 英文也是可以的
dmy_hms("1 Jan 2017 23:12:34") # 月份首字母大小写都可以

mdy("july 4th, 2022") #4或者4th都可以

dmy("4th of July 2020")

# 从数值解析
ymd(20220216)
mdy(03122022)

# 季节
yq("2022:Q2") #q或者Q都可以


```

### 其他例子

如果是以小数点分割的年月类型，且是数值型，也是可以解析的：

```{r}
date_decimal(2022.3)
date_decimal(2022.03)
```

快速获取当前的日期和时间：

```{r}
now()
today()
```

快速解析日期时间：

```{r,eval=FALSE}
# 基于C写的，解析速度快，数据量大时才能体现，这3个函数用法基本一样
fast_strptime()
parse_date_time()
parse_date_time2()
```


下面是用于解析多个时间日期的函数，在日常接触到的数据中，这几个函数才是最常用的也是最好用的。

```{r}
# 多个字符
x <- c("09-01-01", "09-01-02", "09-01-03")
parse_date_time(x, "ymd")
parse_date_time(x, "y m d")
parse_date_time(x, "%y%m%d")


## 多种格式
x <- c("09-01-01", "090102", "09-01 03", "09-01-03 12:02")
parse_date_time(x, c("ymd", "ymd HM"))

## 顺序不一样
x <- c("2009-01-01", "02022010", "02-02-2010")
parse_date_time(x, c("dmY", "ymd"))


## 格式不全，可使用truncated参数解决
x <- c("2011-12-31 12:59:59", "2010-01-01 12:11", "2010-01-01 12", "2010-01-01")
parse_date_time(x, "Ymd HMS", truncated = 3)

## 指定顺序，使用exact参数
parse_date_time(x, c("%m-%d-%y", "%m%d%y", "%m-%d-%y %H:%M"), exact = TRUE) # 解析失败，因为顺序不一样
parse_date_time(c('12/17/1996 04:00:00','4/18/1950 0130'),
                c('%m/%d/%Y %I:%M:%S','%m/%d/%Y %H%M'), exact = TRUE) # 顺序一样解析成功

## 含有季节
parse_date_time(c("2016.2", "2016-04"), orders = "Yq")
parse_date_time(c("2016", "2016-04"), orders = c("Y", "Ym"))
```

## 获取和设定成分

可用于提取日期时间类型的特定成分，比如提取年、月、日、时、分、秒等；也可单独改变这些成分。

主要包括以下函数

```{r}
x <- "2022-01-23 14:23:09"

date(x) # 获取日期

year(x) # 获取年
isoyear(x)
epiyear(x)

month(x) # 获取月

day(x)
wday(x) # 一周中的第几天
qday(x) # 一个季度中的第几天

hour(x)

minute(x)

second(x)

tz(x) # 获取时区

week(x) # 一年中的第几周
isoweek(x)
epiweek(x)

quarter(x) # 一年中的第几季
semester(x) # 上半年还是下半年

am(x)
pm(x)

dst(x) # 是不是夏令时

leap_year(x) # 是不是闰年！
```

## 对日期时间取约数

```{r}
x <- ymd_hms("2017-11-28 12:00:00")

floor_date(x, unit = "month")
floor_date(x, unit = "day")

round_date(x) # 四舍五入

ceiling_date(x) # 取小
```

`lubridate`包还有一块很重要的内容是日期时间的计算，不过由于在我的日常工作中用得不多，还没有仔细学习过，以后再说！

