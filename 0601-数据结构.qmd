---
title: "数据结构"
---

数据结构就是存储数据的形式。数据结构的概念非常重要，也是必须要理解的内容。

我们常说的**数据操作其实就是对各种数据结构进行操作**，你在平常碰到的绝大多数数据清理/整理等问题，说白了就是对数据框、向量、列表等各种结构进行处理，所以这部分内容非常重要。

因为不同的结构有不同的操作方法。比如第5章中读取的`brca_clin`，其实就是一个数据框（`data.frame`），我们要做的就是对这个数据框进行各种操作。

R拥有许多用于存储数据的对象类型，包括标量、向量、矩阵、数组、数据框和列表等。它们在存储数据的类型、创建方式、结构复杂度，以及对它们进行操作的方法等均有所不同。下图给出了这些数据结构的一个示意图。

![R中的数据结构](figs/PixPin_2024-02-22_15-35-50.png)

:::{.callout-note}
R中有一些术语较为独特，可能会对新用户造成困扰。在R中，**对象**（object）是指可以赋值给变量的任何事物，包括常量、数据结构、函数，甚至图形。对象都拥有某种模式，描述了此对象是如何存储的，以及某个类（class），像`print()`这样的泛型函数表明如何处理此对象。
与其他标准统计软件（如SAS、SPSS和Stata）中的数据集类似，**数据框**（`dataframe`）是R中用于存储数据的一种结构：列表示变量，行表示观测。在同一个数据框中可以存储不同类型（如数值型、字符型）的变量。数据框将是你用来存储数据集的主要数据结构。
:::

## 向量

向量，`vector`，就是同一类型的多个元素构成的序列，可以是数值型、字符型、逻辑型等。

### 创建向量

在R中，最基本的创建向量的方法是使用函数`c()`：

```{r}
# 创建一个名字是a的向量
a <- c(1, 2, 5, 3, 6, -2, 4)
class(a) # 查看类型

# 创建一个名字是b的向量
b <- c("one", "two", "three")

# 创建一个名字是d的向量，不用c是为了避免和函数 c() 混淆
d <- c(TRUE, TRUE, TRUE, FALSE, TRUE, FALSE)
```

这里，`a`是数值型向量，`b`是字符型向量，而`d`是逻辑型向量。向量中的值被称为**元素**（element），比如向量`a`的第一个元素是`1`，向量`b`的第一个元素是`"one"`。

注意，单个向量中的数据有相同的类型或模式（数值型、字符型或逻辑型）。同一向量中无法混杂不同类型的数据。比如：

```{r}
# 会都变成字符型
a <- c("a",1,TRUE)
a
```

除了通过`c()`创建向量，还可以使用`seq()`（sequence的缩写）创建数值型的向量，比如，创建一个从1~20的向量，并且步长设置为2：

```{r}
# 从1到20，中间间隔2
seq(1, 20, 2)
```

重复某个值也可以得到一个向量：

```{r}
# rep是replicate的缩写
rep(1:2, times = 3) # 重复1 2 三次
rep(1:2, each = 3)  # 重复1三次，重复2三次
```

或者最简单的方法，使用数字和冒号，生成连续的数字：

```{r}
1:5
```

:::{.callout-tip}
标量是只含一个元素的向量，例如f <- 3、g <- "US"和h <- TRUE。它们用于保存常量。
:::

### 探索向量

查看向量长度：

```{r}
length(d)
```

查看前6行/后6行：

```{r}
head(seq(1, 20, 2))
tail(seq(1, 20, 2))
```

查看唯一元素：

```{r}
a <- c(1,2,2,3,4,4,4)

# 查看唯一元素
unique(a)
```

查看一共有几种不同的元素，以及每个元素的个数，也就是计数：

```{r}
table(a)
```

### 向量排序

如果要对向量排序：

```{r}
# 创建一个向量a
a <- c(4,1,2,3)
a

# 排序，默认按照从小到大
sort(a)

# 按照从大到小的顺序排列
sort(a, decreasing = T)

# 反转顺序
rev(a)
```

`order`函数：

```{r}
a <- c(4,1,2,3)
a
order(a)

a[order(a)] # 等价于sort(a)
```

### 去重复

```{r}
a <- c(1,2,2,3,4,4,4)

# 查看是否有重复
duplicated(a)
```

通过反向选择的方式去重，非常重要的方法：

```{r}
# 通过反选的方式去重，很重要,!表示反选
a[!duplicated(a)]
```

### 根据位置选择向量元素

通过在*方括号*中指定元素的位置，我们可以访问（或者叫提取、查看）向量中的某个元素。例如：a[c(2, 4)]用于提取向量`a`中的第二个和第四个元素。更多示例如下：

```{r}
# 创建一个向量，取名为a
a <- c(1, 2, 5, 3, 6, -2, 4)

a[3] # 取第3个元素
a[c(1,3,5)] # 取第1，3，5个元素

a[c(1:3)] # 取第1到第3个元素
a[c(1, 2, 3)] # 和上面结果相同，也是取第1到第3个元素
```

如果提取不存在的位置，则会返回`NA`，比如我们提取第10个元素：

```{r}
a[10]
```

### 替换、删除、增加

如果要替换某个元素，直接提取这个元素并重新赋值即可：

```{r}
a <- c(1, 2, 5, 3, 6, -2, 4)

# 把向量a的第1个元素换成 m
a[1] <- "m"
a # 注意，此时全部变成字符型了哦！

# 同时替换多个元素，注意长度要相同，并且要使用c()放在一个向量中
a[c(1,3,4)] <- c("d","e","f")
a
```

如果要删除某个元素，直接在位置前加负号即可：

```{r}
# 删除a的第一个元素，结果中第一个元素 d 就被删掉了
a[-1]

# 同时删除多个元素
a[c(-1,-2,-3)]
```

如果要继续增加元素，直接使用`c()`即可：

```{r}
# 在向量a中添加3个元素，并赋值给a1
a1 <- c(a, "80", "89", "90")
a1
```

### 根据名字选择向量元素

还可以对向量中的每一个元素取一个名字，比如：

```{r}
# 创建一个命名向量
named_a <- c(age = 18, bmi = 22, weight = 65)
named_a
```

此时，向量`named_a`中的3个元素，都有一个独一无二的名字，此时我们还可以通过向量的名字来访问对应的元素：

```{r}
named_a["age"]

named_a["bmi"]
```

查看每个元素的名字（如果这是一个命名向量的话）：

```{r}
names(named_a)
```

替换元素的名字：

```{r}
# 替换第一个元素的名字，从age变为height
names(named_a)[1] <- "height"
named_a

# 同时替换多个元素的名字
names(named_a)[c(1,2)] <- c("height","gg")
#names(named_a)[1:2] <- c("height","gg")
named_a

# 同时替换所有元素的名字
names(named_a) <- c("aa","bb","cc")
named_a
```

移除元素的名字：

```{r}
# 移除元素的名字，注意不能只移除某个元素的名字，要一起移除
names(named_a) <- NULL
named_a
```

### 根据表达式选择向量元素

除了通过位置和名字选择元素外，还可以通过表达式（也就是`TRUE`或者`FALSE`）：

```{r}
a <- c(1,2,3,10,11)

a[a==10] # 选择等于10的元素
a[a<5]   # 选择小于5的元素
a[a %in% c(2,3,11)]  # 选择在(2,3,11)里面的元素，很常用
```

## 数据框

数据框，data.frame，可能是大家最常用的数据结构了。我们的excel数据读进来一般默认都是数据框结构。

数据框由不同的行和列构成，不同的列可以是不同类型（数值型、字符型、逻辑型等）的数据，比如可以其中一列是数值型，另一列是逻辑型，另一列是字符型，等。但是同一列中必须是相同的类型。

### 创建数据框

数据框可通过函数`data.frame()`创建，使用方式如下：

```{r,eval=FALSE}
mydata <- data.frame(col1, col2, col3,...)
```

其中的列向量`col1`、`col2`、`col3`等可为任何类型（如字符型、数值型或逻辑型）。

以下代码会创建一个数据框，这个数据框有4列，第一列的名字是`patientID`，是数值型；第二列的名字是`age`，也是数值型；第三列的名字是`diabetes`，是字符型；第4列的名字是`status`，也是字符型：

```{r}
# 创建4个向量
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")

# 把4个向量放到一个数据框中
patientdata <- data.frame(patientID, age, diabetes, status)
patientdata
```

我们首先建立了4个向量，然后使用函数`data.frame()`将4个向量组合在一起，就变成了一个数据框`data.frame`，所以你也可以把**数据框看成是多个向量的组合**。

当你对这个操作足够熟悉后，你也可以直接这样写：

```{r}
patientdata <- data.frame(
  patientID = c(1, 2, 3, 4), 
  age = c(25, 34, 28, 52), 
  diabetes = c("Type1", "Type2", "Type1", "Type1"), 
  status = c("Poor", "Improved", "Excellent", "Poor")
  )

patientdata
```

上一章中从外部读取的数据，默认就是数据框结构：

```{r}
library(readxl)
brca_expr <- read_xlsx("datasets/brca_expr.xlsx", col_names = T)

class(brca_expr)
```

:::{.callout-note}
`readxl`是`tidyverse`系列R包的一员，如果你使用了这个系列的R包，那么默认的数据框就不再单单是`data.frame`类型，还会增加`tbl_df`和`tbl`类型，这会在某些操作中报错，千万要注意。
:::

如何变成单纯的`data.frame`类型？只需要使用`as.data.frame()`函数即可：

```{r}
# 转换类型
brca_expr <- as.data.frame(brca_expr)
class(brca_expr) # 查看类型
```

### 探索数据框

查看数据框的基本信息，比如，有几行几列？每一列是什么类型？列名是什么？

```{r}
# 像Excel一样查看数据框，注意，数据太大会直接卡死
View(patientdata) # 或者在环境面板中直接点击数据框名字

# 查看类型
class(patientdata) # 数据框

# 查看数据框的维度，dim是dimension的缩写
dim(patientdata)

# 查看几行几列
ncol(patientdata)
nrow(patientdata)

# 查看数据框的结构：str是structure的缩写
str(patientdata)

# 查看前6行和最后6行
head(patientdata)
tail(patientdata)

# 默认是6行，可以更改，比如改成2行
head(patientdata, 2)

# 查看数据框的列名
names(patientdata)

# 或者使用以下方法查看列名
colnames(patientdata)

# 查看行名
rownames(patientdata)  

# 总结数据信息
summary(patientdata)
```

### 行列选择

如果我们要选择其中的某些行或者某些列，或者某个元素（比如，第2行第3列的值），有多种不同的方法实现。

可以通过方括号实现，就像访问向量的元素一样。

数据框和向量不一样，向量是一维的，数据框既有行也有列，**数据框是二维的**，所以在使用方括号时，我们也要**指定行和列**，行和列之间用`,`隔开，`,`前面表示行，后面表示列。

以下是常见方法，**必须要记住**：

```{r}
patientdata[1, 2] # 取第1行第2列的值 

patientdata[1:2,] # 取第1行到第2行，以及所有列，省略数字就是取所有

patientdata[, 1:3] # 取所有行，以及第1列到第3列

patientdata[c(1,4), c(1,3)] # 取第1行和第4行，以及第1列和第3列
```

如果你在方括号中不写`,`，那么默认是选取其中的列和所有行：

```{r}
patientdata[c(1,3)] # 取第1列和第3列，所有的行
```

除了使用数字序号这种，也可以直接使用列名进行选取（是不是和向量操作非常像？）：

```{r}
patientdata[, "patientID"] # 取patientID这一列和所有的行 ,可省略，下面的也是
patientdata[, c("patientID", "diabetes")] # 取patientID和diabetes两列及所有行
```

除了使用方括号，还可以使用美元符号`$`选取列：

```{r}
# 选取patientID这一列
patientdata$patientID
```

如果要同时选择部分行和列，还有一个专门的函数`subset()`：

```{r}
subset(patientdata, # 数据
       age > 30, # 选择行，age>30的行
       select = c("patientID","diabetes","age") # 选择列
       )
```

`patientdata`这个数据集有4列，每一列都有一个列名，我们可以通过列名很轻松的选取其中的列，但是这个数据集没有行名，我们可以给它添加行名，这个数据共有4行，所以我们要准备4个名字，然后使用`rownames()`添加行名：

```{r}
# 准备4个名字
rws <- c("第一行", "第二行", "第三行", "第四行")

# 添加行名：
rownames(patientdata) <- rws
patientdata
```

这样就可以通过行名选择你想要的行了，比如选择第1行和第3行，所有的列：

```{r}
patientdata[c("第一行", "第三行"), ]
```

选择年龄大于30岁的行以及第2列和第3列：

```{r}
patientdata[patientdata$age > 30, c(2,3)]
```

此时其实是通过`TRUE/FALSE`进行选择，首先看`patientdata$age > 30`：

```{r}
# 第2个和第4个是TRUE，所以就是选择第2行和第4行
patientdata$age > 30
```

这种方法非常有用，大家一定要记住。

### 增加/删除行列

增加行列，删除行列：

```{r}
# 增加1列weight
patientdata$weight <- c(20,30,40,50)
patientdata

# 删除第2列
patientdata[,-2]

# 或者使用以下方法删除列
patientdata$weight <- NULL
patientdata

#patientdata[,- "age"] # 这种写法是错误的
```

### 修改和重编码

```{r}
patientdata <- data.frame(
  patientID = c(1, 2, 3, 4), 
  age = c(25, 34, 28, 52), 
  diabetes = c("Type1", "Type2", "Type1", "Type1"), 
  status = c("Poor", "Improved", "Excellent", "Poor")
  )

patientdata
```

比如，把`diabetes`这一列中的`Type1`变成`类型1`：

```{r}
# 选择要修改的列，选择要修改的值，重新赋值即可
patientdata$diabetes[patientdata$diabetes == "Type1"] <- "类型1"
patientdata
```

把`age`这一列中大于30岁的变成`中年人`，小于等于30岁的变成`青年人`：

```{r}
patientdata$age[patientdata$age > 30] <- "中年人"
patientdata$age[patientdata$age <= 30] <- "青年人"
patientdata
```

### 行列转置

行变成列，列变成行，也就是旋转90°：

```{r}
pdt <- t(patientdata) # transpose缩写
pdt
class(pdt)
```

数据框转置后会变成矩阵，如果要变成数据框，使用`as.data.frame()`即可：

```{r}
pdt <- as.data.frame(t(patientdata))
pdt
class(pdt)
```

### 行列合并

可以分为:

- 合并列：把列合并起来，要求行数相同
- 合并列：把行合并起来，要求列数相同

![](figs/PixPin_2024-08-22_19-17-30.png)

比如现在如下两个数据框：

```{r,echo=FALSE,include=FALSE}
library(readxl)
brca_clin <- read_xlsx("F:/R_books/R_beginners/brca_clin.xlsx", col_names = T)

df1 <- brca_clin[1:3,1:4]
df2 <- brca_clin[1:3,5:9]

df3 <- brca_clin[1:3,1:2]
df4 <- brca_clin[4:5,1:2]
```

```{r}
df1
df2
```

现在我们把两个数据框按列合并：

```{r}
cbind(df1, df2) # column bind
```

假如还有两个数据框：

```{r}
df3
df4
```

进行按行合并：

```{r}
rbind(df3,df4)
```

### 排序

```{r}
patientdata <- data.frame(
  patientID = c(1, 2, 3, 4), 
  age = c(25, 34, 28, 52), 
  diabetes = c("Type1", "Type2", "Type1", "Type1"), 
  status = c("Poor", "Improved", "Excellent", "Poor")
  )
```

根据某一列进行排序，比如根据`age`从小到大对数据框重新排序：

```{r}
patientdata[order(patientdata$age),]
```

### 计数

如果要查看某一列有几个类别及数量：

```{r}
table(patientdata$status)
```

如果你想生成`diabetes`和`status`的列联表，可以使用`table()`函数：

```{r}
table(patientdata$diabetes, patientdata$status)
```

医学生应该都能看懂这个结果什么意思吧？

在每个变量名前都键入一次`patientdata$`的写法是不符合编程思想的，是很繁琐的，所以给大家介绍一个`with()`函数，在`with()`函数内部，你可以不用写数据集的名字：

```{r}
with(patientdata,
     table(diabetes, status)
     )
```

### 数据框实战

这个数据是我从[TCGA官网](https://portal.gdc.cancer.gov/)下载的乳腺癌患者的临床信息，包含：患者ID、样本ID、样本类型（normal还是tumor？）、年龄、性别等。

```{r}
# 读取文件
library(readxl)
brca_clin <- read_xlsx("F:/R_books/R_beginners/brca_clin.xlsx", col_names = T)

# 查看数据基本情况
dim(brca_clin)
head(brca_clin)
colnames(brca_clin)
```

变量名修改：

```{r}
colnames(brca_clin)[c(5,6,7,9)] <- c("weight","stage","days","age")
colnames(brca_clin)
```

选择第5~9列：

```{r}
brca_clin <- brca_clin[,c(5:9)]
brca_clin
```

按照`age`从小到大排序数据框：

```{r}
brca_clin[order(brca_clin$age),]
```

按照从大到小的顺序排列：

```{r}
brca_clin[order(brca_clin$age, decreasing = T),]
```

查看有几个类别，以及每个类别的数量：

```{r}
table(brca_clin$stage)
```

变量重编码和修改：

```{r}
brca_clin$stage[brca_clin$stage == "Stage IIB"] <- "Stage_2"
brca_clin
```

全部修改：

```{r}
brca_clin$stage[brca_clin$stage == "Stage IIA"] <- "Stage_2"
brca_clin$stage[brca_clin$stage == "Stage IA"] <- "Stage_1"
brca_clin$stage[brca_clin$stage == "Stage I"] <- "Stage_1"
brca_clin$stage[brca_clin$stage == "Stage IIIA"] <- "Stage_3"
brca_clin$stage[brca_clin$stage == "Stage IIIC"] <- "Stage_3"

brca_clin
```

查看修改后的`stage`:

```{r}
table(brca_clin$stage)
```

根据年龄进行分组，大于60岁是`old`，小于等于60岁是`young`:

```{r}
# 先看下年龄是不是数值型
str(brca_clin)
is.numeric(brca_clin$age)
```

开始修改：

```{r}
brca_clin$age[brca_clin$age > 60] <- "old"
brca_clin$age[brca_clin$age <= 60] <- "young"
brca_clin
```

NA修改(这个数据框里的NA是字符型，并不是真正的`NA`)：

```{r}
brca_clin$days_1 <- ifelse(brca_clin$days == "NA", NA, brca_clin$days)
brca_clin
```

## 因子

多数变量可归为名义型、有序型或连续型变量。

**名义型变量**（nominal-variable）是没有顺序之分的类别变量。糖尿病类型`diabetes`（`Type1`、`Type2`）是名义型变量的一例。即使在数据中`Type1`编码为`1`而`Type2`编码为2`，这也并不意味着二者是有序的。

**有序型变量**（ordinal-variable）表示一种顺序关系，而非数量关系。病情`status`（`poor`、`improved`、`excellent`）是有序型变量的一个示例。很明显病情为`poor`（较差）病人的状态不如`improved`（病情好转）的病人，但并不知道相差多少。

**连续型变量**（continuous-variable）可以呈现为某个范围内的任意值，并同时表示了顺序和数量。年龄`Age`就是一个连续型变量，它能够表示像14.5或22.8这样的值以及其间的其他任意值。

类别（名义型）变量和有序类别（有序型）变量在R中称为**因子**（factor）。因子在R中非常重要，因为它决定了数据的分析方式以及如何进行视觉呈现。

### 创建因子

因子可以通过函数`factor()`创建。比如用以下代码即可创建一个名为`status`的因子型向量：

```{r}
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
status
```

此时的`status`是一个因子型向量，也是没有顺序之分的**名义型变量**，虽然给出了`Levels`，但是并不能表示它们之间有高低顺序，默认的水平顺序是按照首字母排列的。

### 因子水平和标签

如果要更改不同水平的顺序，可以使用以下代码：

```{r}
# 指定顺序
levels(status) <- c("Poor", "Excellent", "Improved")
status
```

或者直接在`factor()`中指定：

```{r}
status <- factor(c("Poor", "Improved", "Excellent", "Poor"),
                 levels = c("Poor", "Excellent", "Improved")
                 )
status
```

对于不同的水平，你也可以修改它的显示标签：

```{r}
status <- factor(c("Poor", "Improved", "Excellent", "Poor"),
                 levels = c("Poor", "Excellent", "Improved"),
                 labels = c("第一水平", "第二水平", "第三水平")
                 )
status
```

如果想要把某个变量变成**有序型变量**，可以使用`ordered=TRUE`参数：

```{r}
status <- factor(c("Poor", "Improved", "Excellent", "Poor"),
                 ordered = T
                 )
status
```

可以看到此时结果中的`Levels`有了小于号，用来表示高低顺序。

:::{.callout-note}
名义型变量和有序型变量在进行统计分析时会使用完全不同的方法，比如在进行线性回归或者cox回归分析时，名义型变量的默认方法是哑变量编码，而有序型变量的编码方式是正交多项式编码。相关内容可参考：[分类变量进行回归分析时的编码方案](https://mp.weixin.qq.com/s/8j0e3-PpbvTqGDnkPWRFyA)
:::

### 计数

`table()`函数可用于查看每个水平的数量：

```{r}
table(status)
```

如果和`length()`同用则可以快速计算有几个水平（或类别，在分类变量中很常用）：

```{r}
# 查看有几个类别
length(table(status))
```

因子类型是R语言中处理分类变量非常有用的类型，在画图的时候也可以使用因子规定好顺序，方便对图形进行排列。

`forcats`包提供了一套专门用于处理因子的函数，非常实用，大家可以阅读以下文章进一步了解：

- [R语言处理因子之forcats包介绍（1）](https://mp.weixin.qq.com/s/GDG1dlm7ef7L3vbDdafMKg)
- [R语言处理因子之forcats包介绍（2）](https://mp.weixin.qq.com/s/tXvwD5sLbhj8DdXdnRHrbg)
- [R语言处理因子之forcats包介绍（3）](https://mp.weixin.qq.com/s/SnLWumkee3eMGPHYvUmnFQ)
- [R语言处理因子之forcats包介绍（4）](https://mp.weixin.qq.com/s/1BqFHIz-fjDayPTb-71yVw)

## 矩阵

矩阵，matrix，表面看起来像一个数据框，有行和列，也是二维的，但是矩阵里面的所有元素都**必须是同一类型的**，比如必须都是数值型，或者必须都是字符型，或者必须都是逻辑型，等。

可通过函数`matrix()`创建矩阵。一般使用格式为：

```{r,eval=FALSE}
myymatrix <- matrix(vector, nrow = 多少行？, ncol = 多少列？,
                    byrow = 是不是按行进行填充？,
                    dimnames = list(行名, 列名))
```

其中`vector`是矩阵所需要的元素，`nrow`和`ncol`用以指定行和列的数量，`dimnames`包含了以字符型向量表示的行名和列名（这个参数可以省略不写）。选项`byrow`则表明矩阵应当按行填充（`byrow=TRUE`）还是按列填充（`byrow=FALSE`），默认情况下按列填充。

以下代码创建了一个5行、4列的矩阵，用1~20这20个数字进行填充，并且定义了行的名字和列的名字，并且是按列进行填充：

```{r}
y <- matrix(1:20, nrow=5, ncol=4,
            dimnames = list(c("行1","行2","行3","行4","行5"),
                            c("列1","列2","列3","列4"))
            ) 
y
```

对矩阵取行和列的语法和数据框完全一样，使用方括号即可，这里就不重复了。

## 数组

数组，array，类似矩阵，但可以有更多的维度（行、列以外的方向），比如可以有3维甚至更多，这种结构可能是你无法想象的（超过3维的东西你能想象出来吗？），但是幸好这个结构我们用的不多。

数组可通过`array`函数创建，形式如下：

```{r,eval=FALSE}
myarray <- array(vector, dimensions, dimnames)
```

其中`vector`包含了数组中的数据，`dimensions`是一个数值型向量，给出了各个维度下标的最大值，而`dimnames`是可选的、各维度名称标签的列表。

以下代码创建一个三维数组（2*3*4）：

```{r}
dim1 <- c("A1", "A2")
dim2 <- c("B1", "B2", "B3")
dim3 <- c("C1", "C2", "C3", "C4")

z <- array(1:24, c(2, 3, 4), dimnames=list(dim1, dim2, dim3))
z
```

## 列表

列表，list，是除了数据框之外第二重要的数据结构，甚至可以说是最重要的数据结构，但同时也是最复杂的一种结构。

列表是一个大型的存储结构，里面啥都能放。比如，可以包含不同类型的数据，也可以包含其他数据结构，如向量、矩阵或数据框等，列表中也可以包含列表。

### 创建列表

可以使用函数list()创建列表，使用语法为：

```{r,eval=FALSE}
mylist <- list(object1, object2, ...)
```

其中的对象可以是目前为止讲到的任何结构。你还可以为列表中的对象命名：

```{r,eval=FALSE}
mylist <- list(name1=object1, name2=object2, ...)
```

以下是一个创建列表的示例，我们先创建了5个不同类型的对象，然后把这些对象全部放到1个列表中：

```{r}
g <- "My First List" # 字符串
h <- c(25, 26, 18, 39) # 数值型向量
j <- matrix(1:10, nrow=5) # 矩阵
k <- c("one", "two", "three") # 字符型向量
l <- list("apple",1,TRUE) # 列表

# 放到1个列表中
mylist <- list(title=g, ages=h, j, k, l)
mylist
```

可以看出列表的成分非常复杂，上面的列表`mylist`的长度为5，因为有5个成分：

```{r}
# 查看长度
length(mylist)
```

前两个成分是有名字的：`title`和`ages`，后三个成分没有名字，但是有序号，分别是`[[3]]`、`[[4]]`、`[[5]]`。

### 列表取子集

如果你要提取列表中的成分（或者叫对列表取子集），可以直接使用序号或者名字：

```{r}
mylist[2] # 取第2个成分
mylist["title"] # 取第一个成分
```

注意此时得到的对象仍然是`list`：

```{r}
class(mylist[2])
class(mylist["title"])
```

列表中还有一个特殊的操作，也就是`[[]]`，两个中括号，这样可以直接提取到具体的内容：

```{r}
# 直接提取具体的内容
mylist[["title"]]

# 此时得到的是字符型向量
class(mylist[["title"]])
```

或者可以使用`$`，也可以直接得到具体的内容，但是这种方法只能用于有名字的时候：

```{r}
mylist$title
```

### 修改名字

如果要给列表中的成分添加/修改/删除名字，也是使用`names()`：

```{r}
# 给第3-5个元素添加名字
names(mylist)[3:5] <- c("名字3","名字4","名字5")

# 或者：
names(mylist)[c(3:5)] <- c("名字3","名字4","名字5")

# 查看结果
names(mylist)
```

```{r}
#修改第一个成分的名字：
names(mylist)[1] <- "改个名字"
names(mylist)
```

删除名字：

```{r}
# 删除所有名字
names(mylist) <- NULL
names(mylist) # 此时再查看名字已经没有了
```

### 添加/删除列表元素

如果要向列表中添加新的成分：

```{r}
mylist[["新的元素"]] <- c(1,2,3)
mylist
```

删除列表中的成分：

```{r}
# 删除第一个成分
mylist <- mylist[-1]
mylist

# 或者
mylist$新的元素 <- NULL
mylist
```

### 列表展开

把列表展开成向量：

```{r}
unlist(mylist)
class(unlist(mylist))
str(unlist(mylist)) # 命名字符型向量
```

掌握了这些基本的数据结构和常用操作后，就算是正式入门R语言了，后面的章节会继续一些常用的数据处理操作。
